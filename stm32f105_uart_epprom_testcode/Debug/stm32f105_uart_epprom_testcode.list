
stm32f105_uart_epprom_testcode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db0  08004db0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08004e28  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004e28  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009137  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001825  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bea  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b84b  00000000  00000000  0002d872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae340  00000000  00000000  000390bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e73fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b54  00000000  00000000  000e7450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004cfc 	.word	0x08004cfc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004cfc 	.word	0x08004cfc

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <sendData>:

/* USER CODE BEGIN PV */


// UART COMM. ILE VERİ GONDERME FONKSIYONU
void sendData(char *data) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	len = sizeof(txdata) / sizeof(txdata[0]);
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <sendData+0x58>)
 8000536:	2208      	movs	r2, #8
 8000538:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00b      	b.n	8000558 <sendData+0x2c>
		txdata[i] = data[i];
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	7819      	ldrb	r1, [r3, #0]
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <sendData+0x5c>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	460a      	mov	r2, r1
 8000550:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <sendData+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4293      	cmp	r3, r2
 8000562:	dbed      	blt.n	8000540 <sendData+0x14>
	}
	sprintf(txdatanew, "%s",txdata);
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <sendData+0x5c>)
 8000566:	4909      	ldr	r1, [pc, #36]	; (800058c <sendData+0x60>)
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <sendData+0x64>)
 800056a:	f003 ff4d 	bl	8004408 <siprintf>
	HAL_UART_Transmit(&huart5, (uint8_t*)&txdatanew, 8, 500);
 800056e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000572:	2208      	movs	r2, #8
 8000574:	4906      	ldr	r1, [pc, #24]	; (8000590 <sendData+0x64>)
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <sendData+0x68>)
 8000578:	f003 f92f 	bl	80037da <HAL_UART_Transmit>
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000b9 	.word	0x200000b9
 8000588:	20000094 	.word	0x20000094
 800058c:	08004d14 	.word	0x08004d14
 8000590:	2000009c 	.word	0x2000009c
 8000594:	20000168 	.word	0x20000168

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (huart == &huart4) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <HAL_UART_RxCpltCallback+0x6c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d128      	bne.n	80005fa <HAL_UART_RxCpltCallback+0x62>
		previousTime = currentTime;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_UART_RxCpltCallback+0x70>)
 80005aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ae:	4917      	ldr	r1, [pc, #92]	; (800060c <HAL_UART_RxCpltCallback+0x74>)
 80005b0:	e9c1 2300 	strd	r2, r3, [r1]
		rxBuf[rxindex] = Buf_1ch[0];
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_UART_RxCpltCallback+0x7c>)
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_UART_RxCpltCallback+0x80>)
 80005c0:	5499      	strb	r1, [r3, r2]
		final_data[rxindex] = rxBuf[rxindex];
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_UART_RxCpltCallback+0x80>)
 80005d0:	5c59      	ldrb	r1, [r3, r1]
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_UART_RxCpltCallback+0x84>)
 80005d4:	5499      	strb	r1, [r3, r2]
		rxindex++;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005e0:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart4, Buf_1ch, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <HAL_UART_RxCpltCallback+0x7c>)
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <HAL_UART_RxCpltCallback+0x6c>)
 80005e8:	f003 f989 	bl	80038fe <HAL_UART_Receive_DMA>
		if (rxindex >= 8) {
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d902      	bls.n	80005fa <HAL_UART_RxCpltCallback+0x62>
			rxindex = 0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_UART_RxCpltCallback+0x78>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000124 	.word	0x20000124
 8000608:	200000c0 	.word	0x200000c0
 800060c:	200000c8 	.word	0x200000c8
 8000610:	200000b4 	.word	0x200000b4
 8000614:	200000b8 	.word	0x200000b8
 8000618:	200000ac 	.word	0x200000ac
 800061c:	200000a4 	.word	0x200000a4

08000620 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000626:	f000 fb8f 	bl	8000d48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062a:	f000 f883 	bl	8000734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062e:	f000 f963 	bl	80008f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000632:	f000 f943 	bl	80008bc <MX_DMA_Init>
	MX_I2C2_Init();
 8000636:	f000 f8bf 	bl	80007b8 <MX_I2C2_Init>
	MX_UART4_Init();
 800063a:	f000 f8eb 	bl	8000814 <MX_UART4_Init>
	MX_UART5_Init();
 800063e:	f000 f913 	bl	8000868 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, Buf_1ch, 1); // dmayı tekrar kurduk yine alabilsin diye
 8000642:	2201      	movs	r2, #1
 8000644:	4932      	ldr	r1, [pc, #200]	; (8000710 <main+0xf0>)
 8000646:	4833      	ldr	r0, [pc, #204]	; (8000714 <main+0xf4>)
 8000648:	f003 f959 	bl	80038fe <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <main+0xf8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <main+0xf8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f022 0204 	bic.w	r2, r2, #4
 800065a:	601a      	str	r2, [r3, #0]

	//EEPROM
	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f000 fbd5 	bl	8000e0c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2, DEV_ADDR, 0, 8, dataRead, 4, 20);
 8000662:	2314      	movs	r3, #20
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2304      	movs	r3, #4
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <main+0xfc>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2308      	movs	r3, #8
 8000670:	2200      	movs	r2, #0
 8000672:	21a0      	movs	r1, #160	; 0xa0
 8000674:	482a      	ldr	r0, [pc, #168]	; (8000720 <main+0x100>)
 8000676:	f001 fd3f 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f000 fbc6 	bl	8000e0c <HAL_Delay>
	//EEPROM
	int flag = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sendData("52052050");
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <main+0x104>)
 8000686:	f7ff ff51 	bl	800052c <sendData>
		HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f000 fbbd 	bl	8000e0c <HAL_Delay>
		sendData("77777777");
 8000692:	4825      	ldr	r0, [pc, #148]	; (8000728 <main+0x108>)
 8000694:	f7ff ff4a 	bl	800052c <sendData>
		HAL_Delay(1000);
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f000 fbb6 	bl	8000e0c <HAL_Delay>
		sendData("22222222");
 80006a0:	4822      	ldr	r0, [pc, #136]	; (800072c <main+0x10c>)
 80006a2:	f7ff ff43 	bl	800052c <sendData>
		dataWrite[0]=1;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0x110>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
		dataWrite[1]=2;
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <main+0x110>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	705a      	strb	r2, [r3, #1]
		dataWrite[2]=3;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x110>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	709a      	strb	r2, [r3, #2]
		dataWrite[3]=4;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <main+0x110>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	70da      	strb	r2, [r3, #3]
		HAL_I2C_Mem_Write(&hi2c2, DEV_ADDR, 0, 8, dataWrite, 4, 20);
 80006be:	2314      	movs	r3, #20
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2304      	movs	r3, #4
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <main+0x110>)
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2308      	movs	r3, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	21a0      	movs	r1, #160	; 0xa0
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <main+0x100>)
 80006d2:	f001 fc17 	bl	8001f04 <HAL_I2C_Mem_Write>
		HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f000 fb97 	bl	8000e0c <HAL_Delay>

		if(flag == 0){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1cf      	bne.n	8000684 <main+0x64>
			HAL_Delay(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f000 fb91 	bl	8000e0c <HAL_Delay>
			HAL_I2C_Mem_Read(&hi2c2, DEV_ADDR, 0, 8, dataRead, 4, 20);
 80006ea:	2314      	movs	r3, #20
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2304      	movs	r3, #4
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0xfc>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2308      	movs	r3, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	21a0      	movs	r1, #160	; 0xa0
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <main+0x100>)
 80006fe:	f001 fcfb 	bl	80020f8 <HAL_I2C_Mem_Read>
			HAL_Delay(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fb82 	bl	8000e0c <HAL_Delay>

			flag = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
		sendData("52052050");
 800070c:	e7ba      	b.n	8000684 <main+0x64>
 800070e:	bf00      	nop
 8000710:	200000b8 	.word	0x200000b8
 8000714:	20000124 	.word	0x20000124
 8000718:	200001ac 	.word	0x200001ac
 800071c:	20000090 	.word	0x20000090
 8000720:	200000d0 	.word	0x200000d0
 8000724:	08004d18 	.word	0x08004d18
 8000728:	08004d24 	.word	0x08004d24
 800072c:	08004d30 	.word	0x08004d30
 8000730:	2000008c 	.word	0x2000008c

08000734 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	2238      	movs	r2, #56	; 0x38
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fe58 	bl	80043f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	2301      	movs	r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2310      	movs	r3, #16
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fa84 	bl	8002c7c <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x4a>
	{
		Error_Handler();
 800077a:	f000 f8f7 	bl	800096c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fd86 	bl	80032a8 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007a2:	f000 f8e3 	bl	800096c <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80007a6:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <SystemClock_Config+0x80>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	42420070 	.word	0x42420070

080007b8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C2_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_I2C2_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C2_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_I2C2_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_I2C2_Init+0x50>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C2_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2C2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_I2C2_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2C2_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2C2_Init+0x50>)
 80007f6:	f001 fa41 	bl	8001c7c <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000800:	f000 f8b4 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d0 	.word	0x200000d0
 800080c:	40005800 	.word	0x40005800
 8000810:	00061a80 	.word	0x00061a80

08000814 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_UART4_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_UART4_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_UART4_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_UART4_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_UART4_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_UART4_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_UART4_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_UART4_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_UART4_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_UART4_Init+0x4c>)
 800084c:	f002 ff78 	bl	8003740 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000856:	f000 f889 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000124 	.word	0x20000124
 8000864:	40004c00 	.word	0x40004c00

08000868 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_UART5_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_UART5_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_UART5_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_UART5_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_UART5_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_UART5_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_UART5_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_UART5_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_UART5_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_UART5_Init+0x4c>)
 80008a0:	f002 ff4e 	bl	8003740 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_UART5_Init+0x46>
	{
		Error_Handler();
 80008aa:	f000 f85f 	bl	800096c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000168 	.word	0x20000168
 80008b8:	40005000 	.word	0x40005000

080008bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_DMA_Init+0x38>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	203a      	movs	r0, #58	; 0x3a
 80008e0:	f000 fb8f 	bl	8001002 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80008e4:	203a      	movs	r0, #58	; 0x3a
 80008e6:	f000 fba8 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0x70>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_GPIO_Init+0x70>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_GPIO_Init+0x70>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_GPIO_Init+0x70>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_GPIO_Init+0x70>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_GPIO_Init+0x70>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_GPIO_Init+0x70>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <MX_GPIO_Init+0x70>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_GPIO_Init+0x70>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_GPIO_Init+0x70>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <MX_GPIO_Init+0x70>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_GPIO_Init+0x70>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_MspInit+0x5c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <HAL_MspInit+0x5c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x5c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x5c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_MspInit+0x60>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_MspInit+0x60>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010000 	.word	0x40010000

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d124      	bne.n	8000a46 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_I2C_MspInit+0x7c>)
 8000a2a:	f000 ffa3 	bl	8001974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005800 	.word	0x40005800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <HAL_UART_MspInit+0x180>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d160      	bne.n	8000b3e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a7c:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a57      	ldr	r2, [pc, #348]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a51      	ldr	r2, [pc, #324]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4848      	ldr	r0, [pc, #288]	; (8000be4 <HAL_UART_MspInit+0x188>)
 8000ac2:	f000 ff57 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4842      	ldr	r0, [pc, #264]	; (8000be4 <HAL_UART_MspInit+0x188>)
 8000adc:	f000 ff4a 	bl	8001974 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000ae2:	4a42      	ldr	r2, [pc, #264]	; (8000bec <HAL_UART_MspInit+0x190>)
 8000ae4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af8:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000afe:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b0a:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000b10:	4835      	ldr	r0, [pc, #212]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b12:	f000 faad 	bl	8001070 <HAL_DMA_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b1c:	f7ff ff26 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b24:	639a      	str	r2, [r3, #56]	; 0x38
 8000b26:	4a30      	ldr	r2, [pc, #192]	; (8000be8 <HAL_UART_MspInit+0x18c>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2034      	movs	r0, #52	; 0x34
 8000b32:	f000 fa66 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b36:	2034      	movs	r0, #52	; 0x34
 8000b38:	f000 fa7f 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b3c:	e049      	b.n	8000bd2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==UART5)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2b      	ldr	r2, [pc, #172]	; (8000bf0 <HAL_UART_MspInit+0x194>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d144      	bne.n	8000bd2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_UART_MspInit+0x184>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <HAL_UART_MspInit+0x188>)
 8000ba6:	f000 fee5 	bl	8001974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000baa:	2304      	movs	r3, #4
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <HAL_UART_MspInit+0x198>)
 8000bbe:	f000 fed9 	bl	8001974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2035      	movs	r0, #53	; 0x35
 8000bc8:	f000 fa1b 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000bcc:	2035      	movs	r0, #53	; 0x35
 8000bce:	f000 fa34 	bl	800103a <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004c00 	.word	0x40004c00
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40011000 	.word	0x40011000
 8000be8:	200001ac 	.word	0x200001ac
 8000bec:	40020430 	.word	0x40020430
 8000bf0:	40005000 	.word	0x40005000
 8000bf4:	40011400 	.word	0x40011400

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f8c9 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <UART4_IRQHandler+0x10>)
 8000c4e:	f002 fe87 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000124 	.word	0x20000124

08000c5c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <UART5_IRQHandler+0x10>)
 8000c62:	f002 fe7d 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000168 	.word	0x20000168

08000c70 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA2_Channel3_IRQHandler+0x10>)
 8000c76:	f000 fc13 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001ac 	.word	0x200001ac

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f003 fb76 	bl	80043a4 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20010000 	.word	0x20010000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200001f0 	.word	0x200001f0
 8000cec:	20000208 	.word	0x20000208

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	; (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff ffe5 	bl	8000cf0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d26:	f003 fb43 	bl	80043b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fc79 	bl	8000620 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d38:	08004db8 	.word	0x08004db8
  ldr r2, =_sbss
 8000d3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d40:	20000208 	.word	0x20000208

08000d44 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f947 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe08 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f95f 	bl	8001056 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f927 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200001f4 	.word	0x200001f4

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200001f4 	.word	0x200001f4

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffe0 	bl	8000df8 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4906      	ldr	r1, [pc, #24]	; (8000eec <__NVIC_EnableIRQ+0x34>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff90 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2d 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff42 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff35 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e059      	b.n	800113a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_DMA_Init+0xd4>)
 800108e:	429a      	cmp	r2, r3
 8001090:	d80f      	bhi.n	80010b2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_DMA_Init+0xd8>)
 800109a:	4413      	add	r3, r2
 800109c:	4a2b      	ldr	r2, [pc, #172]	; (800114c <HAL_DMA_Init+0xdc>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	009a      	lsls	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <HAL_DMA_Init+0xe0>)
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80010b0:	e00e      	b.n	80010d0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_DMA_Init+0xe4>)
 80010ba:	4413      	add	r3, r2
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <HAL_DMA_Init+0xdc>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_DMA_Init+0xe8>)
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40020407 	.word	0x40020407
 8001148:	bffdfff8 	.word	0xbffdfff8
 800114c:	cccccccd 	.word	0xcccccccd
 8001150:	40020000 	.word	0x40020000
 8001154:	bffdfbf8 	.word	0xbffdfbf8
 8001158:	40020400 	.word	0x40020400

0800115c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_DMA_Start_IT+0x20>
 8001178:	2302      	movs	r3, #2
 800117a:	e04a      	b.n	8001212 <HAL_DMA_Start_IT+0xb6>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800118a:	2b01      	cmp	r3, #1
 800118c:	d13a      	bne.n	8001204 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2202      	movs	r2, #2
 8001192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 fbb0 	bl	8001918 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 020e 	orr.w	r2, r2, #14
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e00f      	b.n	80011f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0204 	bic.w	r2, r2, #4
 80011e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 020a 	orr.w	r2, r2, #10
 80011f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e005      	b.n	8001210 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800120c:	2302      	movs	r3, #2
 800120e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001210:	7dfb      	ldrb	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800122c:	2b02      	cmp	r3, #2
 800122e:	d008      	beq.n	8001242 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e020      	b.n	8001284 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020e 	bic.w	r2, r2, #14
 8001250:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
	...

08001290 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d005      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2204      	movs	r2, #4
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e0d6      	b.n	8001460 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 020e 	bic.w	r2, r2, #14
 80012c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0201 	bic.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_DMA_Abort_IT+0x1dc>)
 80012da:	429a      	cmp	r2, r3
 80012dc:	d958      	bls.n	8001390 <HAL_DMA_Abort_IT+0x100>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a63      	ldr	r2, [pc, #396]	; (8001470 <HAL_DMA_Abort_IT+0x1e0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04f      	beq.n	8001388 <HAL_DMA_Abort_IT+0xf8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a61      	ldr	r2, [pc, #388]	; (8001474 <HAL_DMA_Abort_IT+0x1e4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d048      	beq.n	8001384 <HAL_DMA_Abort_IT+0xf4>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_DMA_Abort_IT+0x1e8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d040      	beq.n	800137e <HAL_DMA_Abort_IT+0xee>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a5e      	ldr	r2, [pc, #376]	; (800147c <HAL_DMA_Abort_IT+0x1ec>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d038      	beq.n	8001378 <HAL_DMA_Abort_IT+0xe8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5d      	ldr	r2, [pc, #372]	; (8001480 <HAL_DMA_Abort_IT+0x1f0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d030      	beq.n	8001372 <HAL_DMA_Abort_IT+0xe2>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a5b      	ldr	r2, [pc, #364]	; (8001484 <HAL_DMA_Abort_IT+0x1f4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d028      	beq.n	800136c <HAL_DMA_Abort_IT+0xdc>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a53      	ldr	r2, [pc, #332]	; (800146c <HAL_DMA_Abort_IT+0x1dc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d020      	beq.n	8001366 <HAL_DMA_Abort_IT+0xd6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_DMA_Abort_IT+0x1f8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_DMA_Abort_IT+0xd2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_DMA_Abort_IT+0x1fc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d012      	beq.n	800135e <HAL_DMA_Abort_IT+0xce>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a54      	ldr	r2, [pc, #336]	; (8001490 <HAL_DMA_Abort_IT+0x200>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00a      	beq.n	8001358 <HAL_DMA_Abort_IT+0xc8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a53      	ldr	r2, [pc, #332]	; (8001494 <HAL_DMA_Abort_IT+0x204>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d102      	bne.n	8001352 <HAL_DMA_Abort_IT+0xc2>
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	e01b      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001356:	e018      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	e015      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 800135e:	2310      	movs	r3, #16
 8001360:	e013      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001362:	2301      	movs	r3, #1
 8001364:	e011      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800136a:	e00e      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 800136c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001370:	e00b      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001376:	e008      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	e005      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	e002      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001384:	2310      	movs	r3, #16
 8001386:	e000      	b.n	800138a <HAL_DMA_Abort_IT+0xfa>
 8001388:	2301      	movs	r3, #1
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <HAL_DMA_Abort_IT+0x208>)
 800138c:	6053      	str	r3, [r2, #4]
 800138e:	e057      	b.n	8001440 <HAL_DMA_Abort_IT+0x1b0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a36      	ldr	r2, [pc, #216]	; (8001470 <HAL_DMA_Abort_IT+0x1e0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d04f      	beq.n	800143a <HAL_DMA_Abort_IT+0x1aa>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a35      	ldr	r2, [pc, #212]	; (8001474 <HAL_DMA_Abort_IT+0x1e4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d048      	beq.n	8001436 <HAL_DMA_Abort_IT+0x1a6>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <HAL_DMA_Abort_IT+0x1e8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d040      	beq.n	8001430 <HAL_DMA_Abort_IT+0x1a0>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a32      	ldr	r2, [pc, #200]	; (800147c <HAL_DMA_Abort_IT+0x1ec>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d038      	beq.n	800142a <HAL_DMA_Abort_IT+0x19a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a30      	ldr	r2, [pc, #192]	; (8001480 <HAL_DMA_Abort_IT+0x1f0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d030      	beq.n	8001424 <HAL_DMA_Abort_IT+0x194>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_DMA_Abort_IT+0x1f4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d028      	beq.n	800141e <HAL_DMA_Abort_IT+0x18e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_DMA_Abort_IT+0x1dc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d020      	beq.n	8001418 <HAL_DMA_Abort_IT+0x188>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_DMA_Abort_IT+0x1f8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d019      	beq.n	8001414 <HAL_DMA_Abort_IT+0x184>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_DMA_Abort_IT+0x1fc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_Abort_IT+0x180>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_DMA_Abort_IT+0x200>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00a      	beq.n	800140a <HAL_DMA_Abort_IT+0x17a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_DMA_Abort_IT+0x204>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d102      	bne.n	8001404 <HAL_DMA_Abort_IT+0x174>
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	e01b      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	e018      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 800140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140e:	e015      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001410:	2310      	movs	r3, #16
 8001412:	e013      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001414:	2301      	movs	r3, #1
 8001416:	e011      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800141c:	e00e      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 800141e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001422:	e00b      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	e008      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	e005      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	e002      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 8001436:	2310      	movs	r3, #16
 8001438:	e000      	b.n	800143c <HAL_DMA_Abort_IT+0x1ac>
 800143a:	2301      	movs	r3, #1
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_DMA_Abort_IT+0x20c>)
 800143e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
    } 
  }
  return status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020080 	.word	0x40020080
 8001470:	40020008 	.word	0x40020008
 8001474:	4002001c 	.word	0x4002001c
 8001478:	40020030 	.word	0x40020030
 800147c:	40020044 	.word	0x40020044
 8001480:	40020058 	.word	0x40020058
 8001484:	4002006c 	.word	0x4002006c
 8001488:	40020408 	.word	0x40020408
 800148c:	4002041c 	.word	0x4002041c
 8001490:	40020430 	.word	0x40020430
 8001494:	40020444 	.word	0x40020444
 8001498:	40020400 	.word	0x40020400
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2204      	movs	r2, #4
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80f1 	beq.w	80016ac <HAL_DMA_IRQHandler+0x20c>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80eb 	beq.w	80016ac <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_DMA_IRQHandler+0x1d8>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d958      	bls.n	80015b2 <HAL_DMA_IRQHandler+0x112>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a5d      	ldr	r2, [pc, #372]	; (800167c <HAL_DMA_IRQHandler+0x1dc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04f      	beq.n	80015aa <HAL_DMA_IRQHandler+0x10a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_DMA_IRQHandler+0x1e0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d048      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x106>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <HAL_DMA_IRQHandler+0x1e4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d040      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x100>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a59      	ldr	r2, [pc, #356]	; (8001688 <HAL_DMA_IRQHandler+0x1e8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d038      	beq.n	800159a <HAL_DMA_IRQHandler+0xfa>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_DMA_IRQHandler+0x1ec>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d030      	beq.n	8001594 <HAL_DMA_IRQHandler+0xf4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_DMA_IRQHandler+0x1f0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d028      	beq.n	800158e <HAL_DMA_IRQHandler+0xee>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_DMA_IRQHandler+0x1d8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d020      	beq.n	8001588 <HAL_DMA_IRQHandler+0xe8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_DMA_IRQHandler+0x1f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_DMA_IRQHandler+0xe4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_DMA_IRQHandler+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_IRQHandler+0xe0>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_DMA_IRQHandler+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <HAL_DMA_IRQHandler+0xda>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_DMA_IRQHandler+0x200>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <HAL_DMA_IRQHandler+0xd4>
 800156e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001572:	e01b      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 8001574:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001578:	e018      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	e015      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	e013      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 8001584:	2304      	movs	r3, #4
 8001586:	e011      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 8001588:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800158c:	e00e      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 800158e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001592:	e00b      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 8001594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001598:	e008      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 800159a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159e:	e005      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	e002      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	e000      	b.n	80015ac <HAL_DMA_IRQHandler+0x10c>
 80015aa:	2304      	movs	r3, #4
 80015ac:	4a3d      	ldr	r2, [pc, #244]	; (80016a4 <HAL_DMA_IRQHandler+0x204>)
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e057      	b.n	8001662 <HAL_DMA_IRQHandler+0x1c2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_IRQHandler+0x1dc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04f      	beq.n	800165c <HAL_DMA_IRQHandler+0x1bc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <HAL_DMA_IRQHandler+0x1e0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d048      	beq.n	8001658 <HAL_DMA_IRQHandler+0x1b8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <HAL_DMA_IRQHandler+0x1e4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <HAL_DMA_IRQHandler+0x1b2>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <HAL_DMA_IRQHandler+0x1e8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d038      	beq.n	800164c <HAL_DMA_IRQHandler+0x1ac>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2b      	ldr	r2, [pc, #172]	; (800168c <HAL_DMA_IRQHandler+0x1ec>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d030      	beq.n	8001646 <HAL_DMA_IRQHandler+0x1a6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_DMA_IRQHandler+0x1f0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d028      	beq.n	8001640 <HAL_DMA_IRQHandler+0x1a0>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_DMA_IRQHandler+0x1d8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d020      	beq.n	800163a <HAL_DMA_IRQHandler+0x19a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <HAL_DMA_IRQHandler+0x1f4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_DMA_IRQHandler+0x196>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_DMA_IRQHandler+0x1f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_IRQHandler+0x192>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <HAL_DMA_IRQHandler+0x1fc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <HAL_DMA_IRQHandler+0x18c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_DMA_IRQHandler+0x200>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_DMA_IRQHandler+0x186>
 8001620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001624:	e01b      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001626:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800162a:	e018      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	e015      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	e013      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001636:	2304      	movs	r3, #4
 8001638:	e011      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 800163a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800163e:	e00e      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001644:	e00b      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800164a:	e008      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 800164c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001650:	e005      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	e002      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	e000      	b.n	800165e <HAL_DMA_IRQHandler+0x1be>
 800165c:	2304      	movs	r3, #4
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_DMA_IRQHandler+0x208>)
 8001660:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8136 	beq.w	80018d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001674:	e130      	b.n	80018d8 <HAL_DMA_IRQHandler+0x438>
 8001676:	bf00      	nop
 8001678:	40020080 	.word	0x40020080
 800167c:	40020008 	.word	0x40020008
 8001680:	4002001c 	.word	0x4002001c
 8001684:	40020030 	.word	0x40020030
 8001688:	40020044 	.word	0x40020044
 800168c:	40020058 	.word	0x40020058
 8001690:	4002006c 	.word	0x4002006c
 8001694:	40020408 	.word	0x40020408
 8001698:	4002041c 	.word	0x4002041c
 800169c:	40020430 	.word	0x40020430
 80016a0:	40020444 	.word	0x40020444
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2202      	movs	r2, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80dd 	beq.w	8001878 <HAL_DMA_IRQHandler+0x3d8>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80d7 	beq.w	8001878 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10b      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020a 	bic.w	r2, r2, #10
 80016e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b7b      	ldr	r3, [pc, #492]	; (80018e4 <HAL_DMA_IRQHandler+0x444>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d958      	bls.n	80017ae <HAL_DMA_IRQHandler+0x30e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a79      	ldr	r2, [pc, #484]	; (80018e8 <HAL_DMA_IRQHandler+0x448>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d04f      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x306>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a78      	ldr	r2, [pc, #480]	; (80018ec <HAL_DMA_IRQHandler+0x44c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d048      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x302>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_DMA_IRQHandler+0x450>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d040      	beq.n	800179c <HAL_DMA_IRQHandler+0x2fc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <HAL_DMA_IRQHandler+0x454>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d038      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2f6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a73      	ldr	r2, [pc, #460]	; (80018f8 <HAL_DMA_IRQHandler+0x458>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d030      	beq.n	8001790 <HAL_DMA_IRQHandler+0x2f0>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a72      	ldr	r2, [pc, #456]	; (80018fc <HAL_DMA_IRQHandler+0x45c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d028      	beq.n	800178a <HAL_DMA_IRQHandler+0x2ea>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a69      	ldr	r2, [pc, #420]	; (80018e4 <HAL_DMA_IRQHandler+0x444>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d020      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2e4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_DMA_IRQHandler+0x460>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d019      	beq.n	8001780 <HAL_DMA_IRQHandler+0x2e0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <HAL_DMA_IRQHandler+0x464>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d012      	beq.n	800177c <HAL_DMA_IRQHandler+0x2dc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6b      	ldr	r2, [pc, #428]	; (8001908 <HAL_DMA_IRQHandler+0x468>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00a      	beq.n	8001776 <HAL_DMA_IRQHandler+0x2d6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_DMA_IRQHandler+0x46c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d102      	bne.n	8001770 <HAL_DMA_IRQHandler+0x2d0>
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	e01b      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001774:	e018      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177a:	e015      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 800177c:	2320      	movs	r3, #32
 800177e:	e013      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001780:	2302      	movs	r3, #2
 8001782:	e011      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001788:	e00e      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 800178a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800178e:	e00b      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	e008      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 8001796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179a:	e005      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	e002      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 80017a2:	2320      	movs	r3, #32
 80017a4:	e000      	b.n	80017a8 <HAL_DMA_IRQHandler+0x308>
 80017a6:	2302      	movs	r3, #2
 80017a8:	4a59      	ldr	r2, [pc, #356]	; (8001910 <HAL_DMA_IRQHandler+0x470>)
 80017aa:	6053      	str	r3, [r2, #4]
 80017ac:	e057      	b.n	800185e <HAL_DMA_IRQHandler+0x3be>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_DMA_IRQHandler+0x448>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04f      	beq.n	8001858 <HAL_DMA_IRQHandler+0x3b8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_DMA_IRQHandler+0x44c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d048      	beq.n	8001854 <HAL_DMA_IRQHandler+0x3b4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_DMA_IRQHandler+0x450>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d040      	beq.n	800184e <HAL_DMA_IRQHandler+0x3ae>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_DMA_IRQHandler+0x454>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d038      	beq.n	8001848 <HAL_DMA_IRQHandler+0x3a8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_DMA_IRQHandler+0x458>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d030      	beq.n	8001842 <HAL_DMA_IRQHandler+0x3a2>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_DMA_IRQHandler+0x45c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d028      	beq.n	800183c <HAL_DMA_IRQHandler+0x39c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3d      	ldr	r2, [pc, #244]	; (80018e4 <HAL_DMA_IRQHandler+0x444>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d020      	beq.n	8001836 <HAL_DMA_IRQHandler+0x396>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a41      	ldr	r2, [pc, #260]	; (8001900 <HAL_DMA_IRQHandler+0x460>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_DMA_IRQHandler+0x392>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a40      	ldr	r2, [pc, #256]	; (8001904 <HAL_DMA_IRQHandler+0x464>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d012      	beq.n	800182e <HAL_DMA_IRQHandler+0x38e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_DMA_IRQHandler+0x468>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_DMA_IRQHandler+0x388>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3d      	ldr	r2, [pc, #244]	; (800190c <HAL_DMA_IRQHandler+0x46c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <HAL_DMA_IRQHandler+0x382>
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	e01b      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	e018      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	e015      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 800182e:	2320      	movs	r3, #32
 8001830:	e013      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001832:	2302      	movs	r3, #2
 8001834:	e011      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183a:	e00e      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 800183c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001840:	e00b      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001846:	e008      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184c:	e005      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 800184e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001852:	e002      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001854:	2320      	movs	r3, #32
 8001856:	e000      	b.n	800185a <HAL_DMA_IRQHandler+0x3ba>
 8001858:	2302      	movs	r3, #2
 800185a:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_DMA_IRQHandler+0x474>)
 800185c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	d034      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001876:	e02f      	b.n	80018d8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2208      	movs	r2, #8
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d028      	beq.n	80018da <HAL_DMA_IRQHandler+0x43a>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d023      	beq.n	80018da <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 020e 	bic.w	r2, r2, #14
 80018a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
    }
  }
  return;
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
}
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020080 	.word	0x40020080
 80018e8:	40020008 	.word	0x40020008
 80018ec:	4002001c 	.word	0x4002001c
 80018f0:	40020030 	.word	0x40020030
 80018f4:	40020044 	.word	0x40020044
 80018f8:	40020058 	.word	0x40020058
 80018fc:	4002006c 	.word	0x4002006c
 8001900:	40020408 	.word	0x40020408
 8001904:	4002041c 	.word	0x4002041c
 8001908:	40020430 	.word	0x40020430
 800190c:	40020444 	.word	0x40020444
 8001910:	40020400 	.word	0x40020400
 8001914:	40020000 	.word	0x40020000

08001918 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b10      	cmp	r3, #16
 8001944:	d108      	bne.n	8001958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001956:	e007      	b.n	8001968 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e169      	b.n	8001c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001988:	2201      	movs	r2, #1
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8158 	bne.w	8001c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a9a      	ldr	r2, [pc, #616]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05e      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019b0:	4a98      	ldr	r2, [pc, #608]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d875      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019b6:	4a98      	ldr	r2, [pc, #608]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d058      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019bc:	4a96      	ldr	r2, [pc, #600]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d86f      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019c2:	4a96      	ldr	r2, [pc, #600]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d052      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019c8:	4a94      	ldr	r2, [pc, #592]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d869      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ce:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d04c      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019d4:	4a92      	ldr	r2, [pc, #584]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d863      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019da:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d046      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019e0:	4a90      	ldr	r2, [pc, #576]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d85d      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d82a      	bhi.n	8001a40 <HAL_GPIO_Init+0xcc>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d859      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <HAL_GPIO_Init+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001a5b 	.word	0x08001a5b
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001aa3 	.word	0x08001aa3
 8001a10:	08001aa3 	.word	0x08001aa3
 8001a14:	08001aa3 	.word	0x08001aa3
 8001a18:	08001aa3 	.word	0x08001aa3
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001aa3 	.word	0x08001aa3
 8001a30:	08001aa3 	.word	0x08001aa3
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_GPIO_Init+0x2b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e024      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01f      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e01a      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e013      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          break;
 8001aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d801      	bhi.n	8001aae <HAL_GPIO_Init+0x13a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_Init+0x13e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d802      	bhi.n	8001ac0 <HAL_GPIO_Init+0x14c>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x152>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3b08      	subs	r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	210f      	movs	r1, #15
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80b1 	beq.w	8001c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af4:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <HAL_GPIO_Init+0x2c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1e8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <HAL_GPIO_Init+0x2c8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3d      	ldr	r2, [pc, #244]	; (8001c40 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1e0>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	492f      	ldr	r1, [pc, #188]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	492c      	ldr	r1, [pc, #176]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4928      	ldr	r1, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4922      	ldr	r1, [pc, #136]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	491e      	ldr	r1, [pc, #120]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4918      	ldr	r1, [pc, #96]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4914      	ldr	r1, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d021      	beq.n	8001c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e021      	b.n	8001c56 <HAL_GPIO_Init+0x2e2>
 8001c12:	bf00      	nop
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10220000 	.word	0x10220000
 8001c20:	10210000 	.word	0x10210000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f ae8e 	bne.w	8001988 <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	372c      	adds	r7, #44	; 0x2c
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e12b      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fe9a 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f001 fce8 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a81      	ldr	r2, [pc, #516]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d807      	bhi.n	8001d00 <HAL_I2C_Init+0x84>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a80      	ldr	r2, [pc, #512]	; (8001ef4 <HAL_I2C_Init+0x278>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bf94      	ite	ls
 8001cf8:	2301      	movls	r3, #1
 8001cfa:	2300      	movhi	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e006      	b.n	8001d0e <HAL_I2C_Init+0x92>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a7d      	ldr	r2, [pc, #500]	; (8001ef8 <HAL_I2C_Init+0x27c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0e7      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a78      	ldr	r2, [pc, #480]	; (8001efc <HAL_I2C_Init+0x280>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d802      	bhi.n	8001d50 <HAL_I2C_Init+0xd4>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	e009      	b.n	8001d64 <HAL_I2C_Init+0xe8>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_I2C_Init+0x284>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	495c      	ldr	r1, [pc, #368]	; (8001ef0 <HAL_I2C_Init+0x274>)
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d819      	bhi.n	8001db8 <HAL_I2C_Init+0x13c>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e59      	subs	r1, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d98:	400b      	ands	r3, r1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_I2C_Init+0x138>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e59      	subs	r1, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	e051      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e04f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_I2C_Init+0x168>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_I2C_Init+0x18e>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x196>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e022      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <HAL_I2C_Init+0x1bc>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e58      	subs	r0, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	440b      	add	r3, r1
 8001e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6911      	ldr	r1, [r2, #16]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	000186a0 	.word	0x000186a0
 8001ef4:	001e847f 	.word	0x001e847f
 8001ef8:	003d08ff 	.word	0x003d08ff
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	817b      	strh	r3, [r7, #10]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f1e:	f7fe ff6b 	bl	8000df8 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	f040 80d9 	bne.w	80020e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2319      	movs	r3, #25
 8001f38:	2201      	movs	r2, #1
 8001f3a:	496d      	ldr	r1, [pc, #436]	; (80020f0 <HAL_I2C_Mem_Write+0x1ec>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fcc1 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0cc      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Mem_Write+0x56>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e0c5      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d007      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2221      	movs	r2, #33	; 0x21
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_I2C_Mem_Write+0x1f0>)
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc2:	88f8      	ldrh	r0, [r7, #6]
 8001fc4:	893a      	ldrh	r2, [r7, #8]
 8001fc6:	8979      	ldrh	r1, [r7, #10]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 faf8 	bl	80025c8 <I2C_RequestMemoryWrite>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d052      	beq.n	8002084 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e081      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fd42 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11b      	bne.n	8002084 <HAL_I2C_Mem_Write+0x180>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1aa      	bne.n	8001fe2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fd2e 	bl	8002af2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e016      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00100002 	.word	0x00100002
 80020f4:	ffff0000 	.word	0xffff0000

080020f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002116:	f7fe fe6f 	bl	8000df8 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	f040 8244 	bne.w	80025b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2319      	movs	r3, #25
 8002130:	2201      	movs	r2, #1
 8002132:	4982      	ldr	r1, [pc, #520]	; (800233c <HAL_I2C_Mem_Read+0x244>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fbc5 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e237      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Mem_Read+0x5a>
 800214e:	2302      	movs	r3, #2
 8002150:	e230      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d007      	beq.n	8002178 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2222      	movs	r2, #34	; 0x22
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a62      	ldr	r2, [pc, #392]	; (8002340 <HAL_I2C_Mem_Read+0x248>)
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ba:	88f8      	ldrh	r0, [r7, #6]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa92 	bl	80026f4 <I2C_RequestMemoryRead>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1ec      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e1c0      	b.n	800258c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11e      	bne.n	8002250 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002220:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002222:	b672      	cpsid	i
}
 8002224:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800224c:	b662      	cpsie	i
}
 800224e:	e035      	b.n	80022bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	2b02      	cmp	r3, #2
 8002256:	d11e      	bne.n	8002296 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002290:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002292:	b662      	cpsie	i
}
 8002294:	e012      	b.n	80022bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022bc:	e166      	b.n	800258c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	f200 811f 	bhi.w	8002506 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d123      	bne.n	8002318 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fc4d 	bl	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e167      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002316:	e139      	b.n	800258c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b02      	cmp	r3, #2
 800231e:	d152      	bne.n	80023c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	2200      	movs	r2, #0
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <HAL_I2C_Mem_Read+0x24c>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 faca 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e13c      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
 800233a:	bf00      	nop
 800233c:	00100002 	.word	0x00100002
 8002340:	ffff0000 	.word	0xffff0000
 8002344:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800238e:	b662      	cpsie	i
}
 8002390:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c4:	e0e2      	b.n	800258c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	2200      	movs	r2, #0
 80023ce:	497b      	ldr	r1, [pc, #492]	; (80025bc <HAL_I2C_Mem_Read+0x4c4>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fa77 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0e9      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002426:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_I2C_Mem_Read+0x4c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_I2C_Mem_Read+0x4cc>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0a1a      	lsrs	r2, r3, #8
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00da      	lsls	r2, r3, #3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	3b01      	subs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d118      	bne.n	800247e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800246e:	b662      	cpsie	i
}
 8002470:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e09a      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d1d9      	bne.n	8002440 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024ce:	b662      	cpsie	i
}
 80024d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002504:	e042      	b.n	800258c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fb32 	bl	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e04c      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d118      	bne.n	800258c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f ae94 	bne.w	80022be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	00010004 	.word	0x00010004
 80025c0:	20000000 	.word	0x20000000
 80025c4:	14f8b589 	.word	0x14f8b589

080025c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f960 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002618:	d103      	bne.n	8002622 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e05f      	b.n	80026e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	492d      	ldr	r1, [pc, #180]	; (80026f0 <I2C_RequestMemoryWrite+0x128>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f998 	bl	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04c      	b.n	80026e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa02 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e02b      	b.n	80026e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	611a      	str	r2, [r3, #16]
 800269e:	e021      	b.n	80026e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026a0:	893b      	ldrh	r3, [r7, #8]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6a39      	ldr	r1, [r7, #32]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f9dc 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e005      	b.n	80026e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026da:	893b      	ldrh	r3, [r7, #8]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	00010002 	.word	0x00010002

080026f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4603      	mov	r3, r0
 8002704:	817b      	strh	r3, [r7, #10]
 8002706:	460b      	mov	r3, r1
 8002708:	813b      	strh	r3, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800271c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2200      	movs	r2, #0
 8002736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8c2 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002754:	d103      	bne.n	800275e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0aa      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	4952      	ldr	r1, [pc, #328]	; (80028c0 <I2C_RequestMemoryRead+0x1cc>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f8fa 	bl	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e097      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	6a39      	ldr	r1, [r7, #32]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f964 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00d      	beq.n	80027ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d107      	bne.n	80027c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e076      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d0:	893b      	ldrh	r3, [r7, #8]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e021      	b.n	8002820 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027dc:	893b      	ldrh	r3, [r7, #8]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f93e 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d107      	bne.n	8002812 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e050      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002816:	893b      	ldrh	r3, [r7, #8]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	6a39      	ldr	r1, [r7, #32]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f923 	bl	8002a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	2b04      	cmp	r3, #4
 8002836:	d107      	bne.n	8002848 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e035      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2200      	movs	r2, #0
 8002864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f82b 	bl	80028c4 <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00d      	beq.n	8002890 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002882:	d103      	bne.n	800288c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e013      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <I2C_RequestMemoryRead+0x1cc>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f863 	bl	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	00010002 	.word	0x00010002

080028c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d4:	e025      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d021      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe fa8b 	bl	8000df8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d116      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e023      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10d      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x84>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	e00c      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	429a      	cmp	r2, r3
 8002966:	d0b6      	beq.n	80028d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002980:	e051      	b.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d123      	bne.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e046      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d021      	beq.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe fa09 	bl	8000df8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e020      	b.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10c      	bne.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	e00b      	b.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d18d      	bne.n	8002982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f8ce 	bl	8002c20 <I2C_IsAcknowledgeFailed>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02d      	b.n	8002aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d021      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe f9af 	bl	8000df8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e007      	b.n	8002aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d1ca      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afe:	e02d      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f88d 	bl	8002c20 <I2C_IsAcknowledgeFailed>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e02d      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d021      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7fe f96e 	bl	8000df8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e007      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d1ca      	bne.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b80:	e042      	b.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d119      	bne.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e029      	b.n	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc4:	f7fe f918 	bl	8000df8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d302      	bcc.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e007      	b.n	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d1b5      	bne.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d11b      	bne.n	8002c70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0204 	orr.w	r2, r3, #4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e304      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca8:	4b8f      	ldr	r3, [pc, #572]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x12c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e2de      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x76>
 8002ce4:	4b80      	ldr	r3, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x98>
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7a      	ldr	r2, [pc, #488]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xbc>
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a71      	ldr	r2, [pc, #452]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a67      	ldr	r2, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe f84e 	bl	8000df8 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe f84a 	bl	8000df8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e292      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe4>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe f83a 	bl	8000df8 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe f836 	bl	8000df8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e27e      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x10c>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
 8002dce:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e252      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4939      	ldr	r1, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b36      	ldr	r3, [pc, #216]	; (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fd ffef 	bl	8000df8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fd ffeb 	bl	8000df8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e233      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4927      	ldr	r1, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fd ffce 	bl	8000df8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fd ffca 	bl	8000df8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e212      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fd ffae 	bl	8000df8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fd ffaa 	bl	8000df8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1f2      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f000 fc20 	bl	8003704 <RCC_Delay>
 8002ec4:	e01c      	b.n	8002f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fd ff94 	bl	8000df8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ff90 	bl	8000df8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1d8      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	42420000 	.word	0x42420000
 8002ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b9b      	ldr	r3, [pc, #620]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e9      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a6 	beq.w	800305a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b94      	ldr	r3, [pc, #592]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b91      	ldr	r3, [pc, #580]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a90      	ldr	r2, [pc, #576]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b8e      	ldr	r3, [pc, #568]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x4ec>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x4ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x4ec>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fd ff51 	bl	8000df8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd ff4d 	bl	8000df8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e195      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x4ec>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x312>
 8002f80:	4b78      	ldr	r3, [pc, #480]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a77      	ldr	r2, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x334>
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a72      	ldr	r2, [pc, #456]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e01c      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x356>
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fd2:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a63      	ldr	r2, [pc, #396]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a60      	ldr	r2, [pc, #384]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d015      	beq.n	800301e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd ff01 	bl	8000df8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fd fefd 	bl	8000df8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e143      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b54      	ldr	r3, [pc, #336]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCC_OscConfig+0x37e>
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd feeb 	bl	8000df8 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fd fee7 	bl	8000df8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e12d      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ee      	bne.n	8003026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4b45      	ldr	r3, [pc, #276]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a44      	ldr	r2, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003058:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 808c 	beq.w	800317c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d10e      	bne.n	8003090 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800307a:	2b08      	cmp	r3, #8
 800307c:	d108      	bne.n	8003090 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800307e:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e103      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2b02      	cmp	r3, #2
 8003096:	d14e      	bne.n	8003136 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80030a4:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0ef      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_OscConfig+0x4f0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd fe9b 	bl	8000df8 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80030c6:	f7fd fe97 	bl	8000df8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0df      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	491c      	ldr	r1, [pc, #112]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4918      	ldr	r1, [pc, #96]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	4313      	orrs	r3, r2
 8003106:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCC_OscConfig+0x4f0>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd fe73 	bl	8000df8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003116:	f7fd fe6f 	bl	8000df8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0b7      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x49a>
 8003134:	e022      	b.n	800317c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x4e8>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_OscConfig+0x4f0>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd fe56 	bl	8000df8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800314e:	e00f      	b.n	8003170 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003150:	f7fd fe52 	bl	8000df8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d908      	bls.n	8003170 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e09a      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e9      	bne.n	8003150 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8088 	beq.w	8003296 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d068      	beq.n	8003264 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d14d      	bne.n	8003236 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <HAL_RCC_OscConfig+0x628>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fd fe2a 	bl	8000df8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fd fe26 	bl	8000df8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e06e      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d10f      	bne.n	80031f0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4931      	ldr	r1, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031de:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	492d      	ldr	r1, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	430b      	orrs	r3, r1
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x628>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd fdf3 	bl	8000df8 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fd fdef 	bl	8000df8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e037      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x59a>
 8003234:	e02f      	b.n	8003296 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x628>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fd fddc 	bl	8000df8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003244:	f7fd fdd8 	bl	8000df8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e020      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c8>
 8003262:	e018      	b.n	8003296 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e013      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	429a      	cmp	r2, r3
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	42420060 	.word	0x42420060

080032a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0d0      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	4965      	ldr	r1, [pc, #404]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800330e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e073      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06b      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4936      	ldr	r1, [pc, #216]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fd fd2e 	bl	8000df8 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fd fd2a 	bl	8000df8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e053      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4922      	ldr	r1, [pc, #136]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1cc>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fc8c 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000
 8003470:	08004d5c 	.word	0x08004d5c
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003480:	b09d      	sub	sp, #116	; 0x74
 8003482:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_GetSysClockFreq+0x210>)
 8003486:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800348a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800348c:	c407      	stmia	r4!, {r0, r1, r2}
 800348e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003490:	4b7f      	ldr	r3, [pc, #508]	; (8003690 <HAL_RCC_GetSysClockFreq+0x214>)
 8003492:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	667b      	str	r3, [r7, #100]	; 0x64
 80034a0:	2300      	movs	r3, #0
 80034a2:	663b      	str	r3, [r7, #96]	; 0x60
 80034a4:	2300      	movs	r3, #0
 80034a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a8:	2300      	movs	r3, #0
 80034aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b4:	2300      	movs	r3, #0
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b8:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_GetSysClockFreq+0x218>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d002      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x52>
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x58>
 80034cc:	e0d4      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_GetSysClockFreq+0x21c>)
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80034d2:	e0d4      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d6:	0c9b      	lsrs	r3, r3, #18
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034e2:	4413      	add	r3, r2
 80034e4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80b9 	beq.w	8003668 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80034f6:	4b67      	ldr	r3, [pc, #412]	; (8003694 <HAL_RCC_GetSysClockFreq+0x218>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3340      	adds	r3, #64	; 0x40
 8003500:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003504:	4413      	add	r3, r2
 8003506:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800350a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_GetSysClockFreq+0x218>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8095 	beq.w	8003644 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_GetSysClockFreq+0x218>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	3301      	adds	r3, #1
 8003526:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003528:	4b5a      	ldr	r3, [pc, #360]	; (8003694 <HAL_RCC_GetSysClockFreq+0x218>)
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3302      	adds	r3, #2
 8003534:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	61fa      	str	r2, [r7, #28]
 800353e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003540:	2200      	movs	r2, #0
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
 8003544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003546:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800354a:	4622      	mov	r2, r4
 800354c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003550:	4684      	mov	ip, r0
 8003552:	fb0c f202 	mul.w	r2, ip, r2
 8003556:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800355a:	468c      	mov	ip, r1
 800355c:	4618      	mov	r0, r3
 800355e:	4621      	mov	r1, r4
 8003560:	4603      	mov	r3, r0
 8003562:	fb03 f30c 	mul.w	r3, r3, ip
 8003566:	4413      	add	r3, r2
 8003568:	4602      	mov	r2, r0
 800356a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356c:	fba2 8901 	umull	r8, r9, r2, r1
 8003570:	444b      	add	r3, r9
 8003572:	4699      	mov	r9, r3
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003586:	0150      	lsls	r0, r2, #5
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	ebb2 0508 	subs.w	r5, r2, r8
 8003590:	eb63 0609 	sbc.w	r6, r3, r9
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	01b3      	lsls	r3, r6, #6
 800359e:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80035a2:	01aa      	lsls	r2, r5, #6
 80035a4:	ebb2 0a05 	subs.w	sl, r2, r5
 80035a8:	eb63 0b06 	sbc.w	fp, r3, r6
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c0:	4692      	mov	sl, r2
 80035c2:	469b      	mov	fp, r3
 80035c4:	eb1a 0308 	adds.w	r3, sl, r8
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	eb4b 0309 	adc.w	r3, fp, r9
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035dc:	4629      	mov	r1, r5
 80035de:	024b      	lsls	r3, r1, #9
 80035e0:	4620      	mov	r0, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	4604      	mov	r4, r0
 80035e6:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80035ea:	4601      	mov	r1, r0
 80035ec:	024a      	lsls	r2, r1, #9
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	2200      	movs	r2, #0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	617a      	str	r2, [r7, #20]
 80035fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035fc:	2200      	movs	r2, #0
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	60fa      	str	r2, [r7, #12]
 8003602:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003606:	4622      	mov	r2, r4
 8003608:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800360c:	4645      	mov	r5, r8
 800360e:	fb05 f202 	mul.w	r2, r5, r2
 8003612:	464e      	mov	r6, r9
 8003614:	4625      	mov	r5, r4
 8003616:	461c      	mov	r4, r3
 8003618:	4623      	mov	r3, r4
 800361a:	fb03 f306 	mul.w	r3, r3, r6
 800361e:	4413      	add	r3, r2
 8003620:	4622      	mov	r2, r4
 8003622:	4644      	mov	r4, r8
 8003624:	fba2 2404 	umull	r2, r4, r2, r4
 8003628:	627c      	str	r4, [r7, #36]	; 0x24
 800362a:	623a      	str	r2, [r7, #32]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	4413      	add	r3, r2
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003636:	f7fc fdf5 	bl	8000224 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003642:	e007      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003646:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_RCC_GetSysClockFreq+0x21c>)
 8003648:	fb03 f202 	mul.w	r2, r3, r2
 800364c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003654:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003658:	461a      	mov	r2, r3
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003666:	e004      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366a:	4a0c      	ldr	r2, [pc, #48]	; (800369c <HAL_RCC_GetSysClockFreq+0x220>)
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8003672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003674:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8003676:	e002      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCC_GetSysClockFreq+0x21c>)
 800367a:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800367c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8003680:	4618      	mov	r0, r3
 8003682:	3774      	adds	r7, #116	; 0x74
 8003684:	46bd      	mov	sp, r7
 8003686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368a:	bf00      	nop
 800368c:	08004d3c 	.word	0x08004d3c
 8003690:	08004d4c 	.word	0x08004d4c
 8003694:	40021000 	.word	0x40021000
 8003698:	007a1200 	.word	0x007a1200
 800369c:	003d0900 	.word	0x003d0900

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff2 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08004d6c 	.word	0x08004d6c

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffde 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	0adb      	lsrs	r3, r3, #11
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08004d6c 	.word	0x08004d6c

08003704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <RCC_Delay+0x34>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <RCC_Delay+0x38>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a5b      	lsrs	r3, r3, #9
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003720:	bf00      	nop
  }
  while (Delay --);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	60fa      	str	r2, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f9      	bne.n	8003720 <RCC_Delay+0x1c>
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	20000000 	.word	0x20000000
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e03f      	b.n	80037d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f978 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fd7f 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d17c      	bne.n	80038f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Transmit+0x2c>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e075      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x3e>
 8003814:	2302      	movs	r3, #2
 8003816:	e06e      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382e:	f7fd fae3 	bl	8000df8 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x82>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800386c:	e02a      	b.n	80038c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 faf1 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e036      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1cf      	bne.n	800386e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fac1 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d11d      	bne.n	8003954 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Receive_DMA+0x26>
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e016      	b.n	8003956 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_UART_Receive_DMA+0x38>
 8003932:	2302      	movs	r3, #2
 8003934:	e00f      	b.n	8003956 <HAL_UART_Receive_DMA+0x58>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	461a      	mov	r2, r3
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fad2 	bl	8003ef4 <UART_Start_Receive_DMA>
 8003950:	4603      	mov	r3, r0
 8003952:	e000      	b.n	8003956 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x52>
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fbc2 	bl	8004134 <UART_Receive_IT>
      return;
 80039b0:	e17b      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80b1 	beq.w	8003b1c <HAL_UART_IRQHandler+0x1bc>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_UART_IRQHandler+0x70>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a6 	beq.w	8003b1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_UART_IRQHandler+0x90>
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_UART_IRQHandler+0xb0>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0202 	orr.w	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_UART_IRQHandler+0xd0>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00f      	beq.n	8003a5a <HAL_UART_IRQHandler+0xfa>
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_UART_IRQHandler+0xee>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0208 	orr.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 811e 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x11e>
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb5b 	bl	8004134 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x146>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d031      	beq.n	8003b0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa9d 	bl	8003fe6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d023      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4a76      	ldr	r2, [pc, #472]	; (8003cb0 <HAL_UART_IRQHandler+0x350>)
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fbd6 	bl	8001290 <HAL_DMA_Abort_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af4:	4610      	mov	r0, r2
 8003af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00e      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8ec 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00a      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8e8 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e006      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8e4 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b16:	e0c3      	b.n	8003ca0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	bf00      	nop
    return;
 8003b1a:	e0c1      	b.n	8003ca0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 80a1 	bne.w	8003c68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 809b 	beq.w	8003c68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8095 	beq.w	8003c68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d04e      	beq.n	8003c00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b6c:	8a3b      	ldrh	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8098 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b78:	8a3a      	ldrh	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 8092 	bcs.w	8003ca4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8a3a      	ldrh	r2, [r7, #16]
 8003b84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d02b      	beq.n	8003be8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fb19 	bl	800121a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f876 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bfe:	e051      	b.n	8003ca4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d047      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0210 	bic.w	r2, r2, #16
 8003c5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5c:	8a7b      	ldrh	r3, [r7, #18]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f842 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c66:	e01f      	b.n	8003ca8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x324>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f9f2 	bl	8004066 <UART_Transmit_IT>
    return;
 8003c82:	e012      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <HAL_UART_IRQHandler+0x34a>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa33 	bl	8004104 <UART_EndTransmit_IT>
    return;
 8003c9e:	e004      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
    return;
 8003ca0:	bf00      	nop
 8003ca2:	e002      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	0800403f 	.word	0x0800403f

08003cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d12a      	bne.n	8003d72 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0210 	bic.w	r2, r2, #16
 8003d70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d106      	bne.n	8003d88 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ffb2 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d86:	e002      	b.n	8003d8e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fc fc05 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff ff97 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dbc:	e002      	b.n	8003dc4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ff81 	bl	8003cc6 <HAL_UART_RxHalfCpltCallback>
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b21      	cmp	r3, #33	; 0x21
 8003dfe:	d108      	bne.n	8003e12 <UART_DMAError+0x46>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e0c:	68b8      	ldr	r0, [r7, #8]
 8003e0e:	f000 f8d5 	bl	8003fbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b22      	cmp	r3, #34	; 0x22
 8003e32:	d108      	bne.n	8003e46 <UART_DMAError+0x7a>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	f000 f8d0 	bl	8003fe6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e52:	68b8      	ldr	r0, [r7, #8]
 8003e54:	f7ff ff40 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	e02c      	b.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d028      	beq.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e80:	f7fc ffba 	bl	8000df8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d21d      	bcs.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e00f      	b.n	8003eec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d0c3      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2222      	movs	r2, #34	; 0x22
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <UART_Start_Receive_DMA+0xbc>)
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <UART_Start_Receive_DMA+0xc0>)
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <UART_Start_Receive_DMA+0xc4>)
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	2200      	movs	r2, #0
 8003f3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f7fd f902 	bl	800115c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08003d01 	.word	0x08003d01
 8003fb4:	08003d97 	.word	0x08003d97
 8003fb8:	08003dcd 	.word	0x08003dcd

08003fbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fd2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ffc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0210 	bic.w	r2, r2, #16
 8004024:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7ff fe3d 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b21      	cmp	r3, #33	; 0x21
 8004078:	d13e      	bne.n	80040f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d114      	bne.n	80040ae <UART_Transmit_IT+0x48>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d110      	bne.n	80040ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]
 80040ac:	e008      	b.n	80040c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	1c59      	adds	r1, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6211      	str	r1, [r2, #32]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fdc5 	bl	8003cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b22      	cmp	r3, #34	; 0x22
 8004146:	f040 8099 	bne.w	800427c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004152:	d117      	bne.n	8004184 <UART_Receive_IT+0x50>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d113      	bne.n	8004184 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004172:	b29a      	uxth	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
 8004182:	e026      	b.n	80041d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004196:	d007      	beq.n	80041a8 <UART_Receive_IT+0x74>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <UART_Receive_IT+0x82>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e008      	b.n	80041c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d148      	bne.n	8004278 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0220 	bic.w	r2, r2, #32
 80041f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	2b01      	cmp	r3, #1
 8004224:	d123      	bne.n	800426e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0210 	bic.w	r2, r2, #16
 800423a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d10a      	bne.n	8004260 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fd3f 	bl	8003cea <HAL_UARTEx_RxEventCallback>
 800426c:	e002      	b.n	8004274 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc f992 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e002      	b.n	800427e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042c2:	f023 030c 	bic.w	r3, r3, #12
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <UART_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7ff f9f4 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	e002      	b.n	80042fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7ff f9dc 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	0119      	lsls	r1, r3, #4
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	4419      	add	r1, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f2f3 	udiv	r2, r2, r3
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x118>)
 800436e:	fba3 0302 	umull	r0, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2064      	movs	r0, #100	; 0x64
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x118>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	440a      	add	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40013800 	.word	0x40013800
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <__errno>:
 80043a4:	4b01      	ldr	r3, [pc, #4]	; (80043ac <__errno+0x8>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <__libc_init_array>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	2600      	movs	r6, #0
 80043b4:	4d0c      	ldr	r5, [pc, #48]	; (80043e8 <__libc_init_array+0x38>)
 80043b6:	4c0d      	ldr	r4, [pc, #52]	; (80043ec <__libc_init_array+0x3c>)
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	42a6      	cmp	r6, r4
 80043be:	d109      	bne.n	80043d4 <__libc_init_array+0x24>
 80043c0:	f000 fc9c 	bl	8004cfc <_init>
 80043c4:	2600      	movs	r6, #0
 80043c6:	4d0a      	ldr	r5, [pc, #40]	; (80043f0 <__libc_init_array+0x40>)
 80043c8:	4c0a      	ldr	r4, [pc, #40]	; (80043f4 <__libc_init_array+0x44>)
 80043ca:	1b64      	subs	r4, r4, r5
 80043cc:	10a4      	asrs	r4, r4, #2
 80043ce:	42a6      	cmp	r6, r4
 80043d0:	d105      	bne.n	80043de <__libc_init_array+0x2e>
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d8:	4798      	blx	r3
 80043da:	3601      	adds	r6, #1
 80043dc:	e7ee      	b.n	80043bc <__libc_init_array+0xc>
 80043de:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e2:	4798      	blx	r3
 80043e4:	3601      	adds	r6, #1
 80043e6:	e7f2      	b.n	80043ce <__libc_init_array+0x1e>
 80043e8:	08004db0 	.word	0x08004db0
 80043ec:	08004db0 	.word	0x08004db0
 80043f0:	08004db0 	.word	0x08004db0
 80043f4:	08004db4 	.word	0x08004db4

080043f8 <memset>:
 80043f8:	4603      	mov	r3, r0
 80043fa:	4402      	add	r2, r0
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d100      	bne.n	8004402 <memset+0xa>
 8004400:	4770      	bx	lr
 8004402:	f803 1b01 	strb.w	r1, [r3], #1
 8004406:	e7f9      	b.n	80043fc <memset+0x4>

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800440e:	b500      	push	{lr}
 8004410:	b09c      	sub	sp, #112	; 0x70
 8004412:	ab1d      	add	r3, sp, #116	; 0x74
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	9006      	str	r0, [sp, #24]
 8004418:	9107      	str	r1, [sp, #28]
 800441a:	9104      	str	r1, [sp, #16]
 800441c:	4808      	ldr	r0, [pc, #32]	; (8004440 <siprintf+0x38>)
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	a902      	add	r1, sp, #8
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	f000 f868 	bl	8004500 <_svfiprintf_r>
 8004430:	2200      	movs	r2, #0
 8004432:	9b02      	ldr	r3, [sp, #8]
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	; 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	2000000c 	.word	0x2000000c
 8004444:	ffff0208 	.word	0xffff0208

08004448 <__ssputs_r>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	688e      	ldr	r6, [r1, #8]
 800444e:	4682      	mov	sl, r0
 8004450:	429e      	cmp	r6, r3
 8004452:	460c      	mov	r4, r1
 8004454:	4690      	mov	r8, r2
 8004456:	461f      	mov	r7, r3
 8004458:	d838      	bhi.n	80044cc <__ssputs_r+0x84>
 800445a:	898a      	ldrh	r2, [r1, #12]
 800445c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004460:	d032      	beq.n	80044c8 <__ssputs_r+0x80>
 8004462:	6825      	ldr	r5, [r4, #0]
 8004464:	6909      	ldr	r1, [r1, #16]
 8004466:	3301      	adds	r3, #1
 8004468:	eba5 0901 	sub.w	r9, r5, r1
 800446c:	6965      	ldr	r5, [r4, #20]
 800446e:	444b      	add	r3, r9
 8004470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004478:	106d      	asrs	r5, r5, #1
 800447a:	429d      	cmp	r5, r3
 800447c:	bf38      	it	cc
 800447e:	461d      	movcc	r5, r3
 8004480:	0553      	lsls	r3, r2, #21
 8004482:	d531      	bpl.n	80044e8 <__ssputs_r+0xa0>
 8004484:	4629      	mov	r1, r5
 8004486:	f000 fb6f 	bl	8004b68 <_malloc_r>
 800448a:	4606      	mov	r6, r0
 800448c:	b950      	cbnz	r0, 80044a4 <__ssputs_r+0x5c>
 800448e:	230c      	movs	r3, #12
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	f8ca 3000 	str.w	r3, [sl]
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449e:	81a3      	strh	r3, [r4, #12]
 80044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a4:	464a      	mov	r2, r9
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	f000 face 	bl	8004a48 <memcpy>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	6126      	str	r6, [r4, #16]
 80044ba:	444e      	add	r6, r9
 80044bc:	6026      	str	r6, [r4, #0]
 80044be:	463e      	mov	r6, r7
 80044c0:	6165      	str	r5, [r4, #20]
 80044c2:	eba5 0509 	sub.w	r5, r5, r9
 80044c6:	60a5      	str	r5, [r4, #8]
 80044c8:	42be      	cmp	r6, r7
 80044ca:	d900      	bls.n	80044ce <__ssputs_r+0x86>
 80044cc:	463e      	mov	r6, r7
 80044ce:	4632      	mov	r2, r6
 80044d0:	4641      	mov	r1, r8
 80044d2:	6820      	ldr	r0, [r4, #0]
 80044d4:	f000 fac6 	bl	8004a64 <memmove>
 80044d8:	68a3      	ldr	r3, [r4, #8]
 80044da:	2000      	movs	r0, #0
 80044dc:	1b9b      	subs	r3, r3, r6
 80044de:	60a3      	str	r3, [r4, #8]
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	4433      	add	r3, r6
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	e7db      	b.n	80044a0 <__ssputs_r+0x58>
 80044e8:	462a      	mov	r2, r5
 80044ea:	f000 fbb1 	bl	8004c50 <_realloc_r>
 80044ee:	4606      	mov	r6, r0
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d1e1      	bne.n	80044b8 <__ssputs_r+0x70>
 80044f4:	4650      	mov	r0, sl
 80044f6:	6921      	ldr	r1, [r4, #16]
 80044f8:	f000 face 	bl	8004a98 <_free_r>
 80044fc:	e7c7      	b.n	800448e <__ssputs_r+0x46>
	...

08004500 <_svfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	4698      	mov	r8, r3
 8004506:	898b      	ldrh	r3, [r1, #12]
 8004508:	4607      	mov	r7, r0
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	460d      	mov	r5, r1
 800450e:	4614      	mov	r4, r2
 8004510:	b09d      	sub	sp, #116	; 0x74
 8004512:	d50e      	bpl.n	8004532 <_svfiprintf_r+0x32>
 8004514:	690b      	ldr	r3, [r1, #16]
 8004516:	b963      	cbnz	r3, 8004532 <_svfiprintf_r+0x32>
 8004518:	2140      	movs	r1, #64	; 0x40
 800451a:	f000 fb25 	bl	8004b68 <_malloc_r>
 800451e:	6028      	str	r0, [r5, #0]
 8004520:	6128      	str	r0, [r5, #16]
 8004522:	b920      	cbnz	r0, 800452e <_svfiprintf_r+0x2e>
 8004524:	230c      	movs	r3, #12
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	e0d1      	b.n	80046d2 <_svfiprintf_r+0x1d2>
 800452e:	2340      	movs	r3, #64	; 0x40
 8004530:	616b      	str	r3, [r5, #20]
 8004532:	2300      	movs	r3, #0
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
 8004536:	2320      	movs	r3, #32
 8004538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800453c:	2330      	movs	r3, #48	; 0x30
 800453e:	f04f 0901 	mov.w	r9, #1
 8004542:	f8cd 800c 	str.w	r8, [sp, #12]
 8004546:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046ec <_svfiprintf_r+0x1ec>
 800454a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800454e:	4623      	mov	r3, r4
 8004550:	469a      	mov	sl, r3
 8004552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004556:	b10a      	cbz	r2, 800455c <_svfiprintf_r+0x5c>
 8004558:	2a25      	cmp	r2, #37	; 0x25
 800455a:	d1f9      	bne.n	8004550 <_svfiprintf_r+0x50>
 800455c:	ebba 0b04 	subs.w	fp, sl, r4
 8004560:	d00b      	beq.n	800457a <_svfiprintf_r+0x7a>
 8004562:	465b      	mov	r3, fp
 8004564:	4622      	mov	r2, r4
 8004566:	4629      	mov	r1, r5
 8004568:	4638      	mov	r0, r7
 800456a:	f7ff ff6d 	bl	8004448 <__ssputs_r>
 800456e:	3001      	adds	r0, #1
 8004570:	f000 80aa 	beq.w	80046c8 <_svfiprintf_r+0x1c8>
 8004574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004576:	445a      	add	r2, fp
 8004578:	9209      	str	r2, [sp, #36]	; 0x24
 800457a:	f89a 3000 	ldrb.w	r3, [sl]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a2 	beq.w	80046c8 <_svfiprintf_r+0x1c8>
 8004584:	2300      	movs	r3, #0
 8004586:	f04f 32ff 	mov.w	r2, #4294967295
 800458a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800458e:	f10a 0a01 	add.w	sl, sl, #1
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	9307      	str	r3, [sp, #28]
 8004596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800459a:	931a      	str	r3, [sp, #104]	; 0x68
 800459c:	4654      	mov	r4, sl
 800459e:	2205      	movs	r2, #5
 80045a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a4:	4851      	ldr	r0, [pc, #324]	; (80046ec <_svfiprintf_r+0x1ec>)
 80045a6:	f000 fa41 	bl	8004a2c <memchr>
 80045aa:	9a04      	ldr	r2, [sp, #16]
 80045ac:	b9d8      	cbnz	r0, 80045e6 <_svfiprintf_r+0xe6>
 80045ae:	06d0      	lsls	r0, r2, #27
 80045b0:	bf44      	itt	mi
 80045b2:	2320      	movmi	r3, #32
 80045b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b8:	0711      	lsls	r1, r2, #28
 80045ba:	bf44      	itt	mi
 80045bc:	232b      	movmi	r3, #43	; 0x2b
 80045be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c2:	f89a 3000 	ldrb.w	r3, [sl]
 80045c6:	2b2a      	cmp	r3, #42	; 0x2a
 80045c8:	d015      	beq.n	80045f6 <_svfiprintf_r+0xf6>
 80045ca:	4654      	mov	r4, sl
 80045cc:	2000      	movs	r0, #0
 80045ce:	f04f 0c0a 	mov.w	ip, #10
 80045d2:	9a07      	ldr	r2, [sp, #28]
 80045d4:	4621      	mov	r1, r4
 80045d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045da:	3b30      	subs	r3, #48	; 0x30
 80045dc:	2b09      	cmp	r3, #9
 80045de:	d94e      	bls.n	800467e <_svfiprintf_r+0x17e>
 80045e0:	b1b0      	cbz	r0, 8004610 <_svfiprintf_r+0x110>
 80045e2:	9207      	str	r2, [sp, #28]
 80045e4:	e014      	b.n	8004610 <_svfiprintf_r+0x110>
 80045e6:	eba0 0308 	sub.w	r3, r0, r8
 80045ea:	fa09 f303 	lsl.w	r3, r9, r3
 80045ee:	4313      	orrs	r3, r2
 80045f0:	46a2      	mov	sl, r4
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	e7d2      	b.n	800459c <_svfiprintf_r+0x9c>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	9103      	str	r1, [sp, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bfbb      	ittet	lt
 8004602:	425b      	neglt	r3, r3
 8004604:	f042 0202 	orrlt.w	r2, r2, #2
 8004608:	9307      	strge	r3, [sp, #28]
 800460a:	9307      	strlt	r3, [sp, #28]
 800460c:	bfb8      	it	lt
 800460e:	9204      	strlt	r2, [sp, #16]
 8004610:	7823      	ldrb	r3, [r4, #0]
 8004612:	2b2e      	cmp	r3, #46	; 0x2e
 8004614:	d10c      	bne.n	8004630 <_svfiprintf_r+0x130>
 8004616:	7863      	ldrb	r3, [r4, #1]
 8004618:	2b2a      	cmp	r3, #42	; 0x2a
 800461a:	d135      	bne.n	8004688 <_svfiprintf_r+0x188>
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	3402      	adds	r4, #2
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	9203      	str	r2, [sp, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	f04f 33ff 	movlt.w	r3, #4294967295
 800462e:	9305      	str	r3, [sp, #20]
 8004630:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80046f0 <_svfiprintf_r+0x1f0>
 8004634:	2203      	movs	r2, #3
 8004636:	4650      	mov	r0, sl
 8004638:	7821      	ldrb	r1, [r4, #0]
 800463a:	f000 f9f7 	bl	8004a2c <memchr>
 800463e:	b140      	cbz	r0, 8004652 <_svfiprintf_r+0x152>
 8004640:	2340      	movs	r3, #64	; 0x40
 8004642:	eba0 000a 	sub.w	r0, r0, sl
 8004646:	fa03 f000 	lsl.w	r0, r3, r0
 800464a:	9b04      	ldr	r3, [sp, #16]
 800464c:	3401      	adds	r4, #1
 800464e:	4303      	orrs	r3, r0
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004656:	2206      	movs	r2, #6
 8004658:	4826      	ldr	r0, [pc, #152]	; (80046f4 <_svfiprintf_r+0x1f4>)
 800465a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800465e:	f000 f9e5 	bl	8004a2c <memchr>
 8004662:	2800      	cmp	r0, #0
 8004664:	d038      	beq.n	80046d8 <_svfiprintf_r+0x1d8>
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <_svfiprintf_r+0x1f8>)
 8004668:	bb1b      	cbnz	r3, 80046b2 <_svfiprintf_r+0x1b2>
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	3307      	adds	r3, #7
 800466e:	f023 0307 	bic.w	r3, r3, #7
 8004672:	3308      	adds	r3, #8
 8004674:	9303      	str	r3, [sp, #12]
 8004676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004678:	4433      	add	r3, r6
 800467a:	9309      	str	r3, [sp, #36]	; 0x24
 800467c:	e767      	b.n	800454e <_svfiprintf_r+0x4e>
 800467e:	460c      	mov	r4, r1
 8004680:	2001      	movs	r0, #1
 8004682:	fb0c 3202 	mla	r2, ip, r2, r3
 8004686:	e7a5      	b.n	80045d4 <_svfiprintf_r+0xd4>
 8004688:	2300      	movs	r3, #0
 800468a:	f04f 0c0a 	mov.w	ip, #10
 800468e:	4619      	mov	r1, r3
 8004690:	3401      	adds	r4, #1
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	4620      	mov	r0, r4
 8004696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800469a:	3a30      	subs	r2, #48	; 0x30
 800469c:	2a09      	cmp	r2, #9
 800469e:	d903      	bls.n	80046a8 <_svfiprintf_r+0x1a8>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0c5      	beq.n	8004630 <_svfiprintf_r+0x130>
 80046a4:	9105      	str	r1, [sp, #20]
 80046a6:	e7c3      	b.n	8004630 <_svfiprintf_r+0x130>
 80046a8:	4604      	mov	r4, r0
 80046aa:	2301      	movs	r3, #1
 80046ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80046b0:	e7f0      	b.n	8004694 <_svfiprintf_r+0x194>
 80046b2:	ab03      	add	r3, sp, #12
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	462a      	mov	r2, r5
 80046b8:	4638      	mov	r0, r7
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <_svfiprintf_r+0x1fc>)
 80046bc:	a904      	add	r1, sp, #16
 80046be:	f3af 8000 	nop.w
 80046c2:	1c42      	adds	r2, r0, #1
 80046c4:	4606      	mov	r6, r0
 80046c6:	d1d6      	bne.n	8004676 <_svfiprintf_r+0x176>
 80046c8:	89ab      	ldrh	r3, [r5, #12]
 80046ca:	065b      	lsls	r3, r3, #25
 80046cc:	f53f af2c 	bmi.w	8004528 <_svfiprintf_r+0x28>
 80046d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d2:	b01d      	add	sp, #116	; 0x74
 80046d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	462a      	mov	r2, r5
 80046de:	4638      	mov	r0, r7
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <_svfiprintf_r+0x1fc>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	f000 f87c 	bl	80047e0 <_printf_i>
 80046e8:	e7eb      	b.n	80046c2 <_svfiprintf_r+0x1c2>
 80046ea:	bf00      	nop
 80046ec:	08004d74 	.word	0x08004d74
 80046f0:	08004d7a 	.word	0x08004d7a
 80046f4:	08004d7e 	.word	0x08004d7e
 80046f8:	00000000 	.word	0x00000000
 80046fc:	08004449 	.word	0x08004449

08004700 <_printf_common>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4616      	mov	r6, r2
 8004706:	4699      	mov	r9, r3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	4607      	mov	r7, r0
 800470e:	4293      	cmp	r3, r2
 8004710:	bfb8      	it	lt
 8004712:	4613      	movlt	r3, r2
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800471a:	460c      	mov	r4, r1
 800471c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004720:	b10a      	cbz	r2, 8004726 <_printf_common+0x26>
 8004722:	3301      	adds	r3, #1
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0699      	lsls	r1, r3, #26
 800472a:	bf42      	ittt	mi
 800472c:	6833      	ldrmi	r3, [r6, #0]
 800472e:	3302      	addmi	r3, #2
 8004730:	6033      	strmi	r3, [r6, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d106      	bne.n	8004748 <_printf_common+0x48>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	42ab      	cmp	r3, r5
 8004746:	dc28      	bgt.n	800479a <_printf_common+0x9a>
 8004748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800474c:	1e13      	subs	r3, r2, #0
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	2301      	movne	r3, #1
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d42d      	bmi.n	80047b4 <_printf_common+0xb4>
 8004758:	4649      	mov	r1, r9
 800475a:	4638      	mov	r0, r7
 800475c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d020      	beq.n	80047a8 <_printf_common+0xa8>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	68e5      	ldr	r5, [r4, #12]
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	2b04      	cmp	r3, #4
 8004770:	bf18      	it	ne
 8004772:	2500      	movne	r5, #0
 8004774:	6832      	ldr	r2, [r6, #0]
 8004776:	f04f 0600 	mov.w	r6, #0
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	bf08      	it	eq
 800477e:	1aad      	subeq	r5, r5, r2
 8004780:	6922      	ldr	r2, [r4, #16]
 8004782:	bf08      	it	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	4293      	cmp	r3, r2
 800478a:	bfc4      	itt	gt
 800478c:	1a9b      	subgt	r3, r3, r2
 800478e:	18ed      	addgt	r5, r5, r3
 8004790:	341a      	adds	r4, #26
 8004792:	42b5      	cmp	r5, r6
 8004794:	d11a      	bne.n	80047cc <_printf_common+0xcc>
 8004796:	2000      	movs	r0, #0
 8004798:	e008      	b.n	80047ac <_printf_common+0xac>
 800479a:	2301      	movs	r3, #1
 800479c:	4652      	mov	r2, sl
 800479e:	4649      	mov	r1, r9
 80047a0:	4638      	mov	r0, r7
 80047a2:	47c0      	blx	r8
 80047a4:	3001      	adds	r0, #1
 80047a6:	d103      	bne.n	80047b0 <_printf_common+0xb0>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7c4      	b.n	800473e <_printf_common+0x3e>
 80047b4:	2030      	movs	r0, #48	; 0x30
 80047b6:	18e1      	adds	r1, r4, r3
 80047b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c2:	4422      	add	r2, r4
 80047c4:	3302      	adds	r3, #2
 80047c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ca:	e7c5      	b.n	8004758 <_printf_common+0x58>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4622      	mov	r2, r4
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0e6      	beq.n	80047a8 <_printf_common+0xa8>
 80047da:	3601      	adds	r6, #1
 80047dc:	e7d9      	b.n	8004792 <_printf_common+0x92>
	...

080047e0 <_printf_i>:
 80047e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	7e0f      	ldrb	r7, [r1, #24]
 80047e6:	4691      	mov	r9, r2
 80047e8:	2f78      	cmp	r7, #120	; 0x78
 80047ea:	4680      	mov	r8, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	469a      	mov	sl, r3
 80047f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047f6:	d807      	bhi.n	8004808 <_printf_i+0x28>
 80047f8:	2f62      	cmp	r7, #98	; 0x62
 80047fa:	d80a      	bhi.n	8004812 <_printf_i+0x32>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f000 80d9 	beq.w	80049b4 <_printf_i+0x1d4>
 8004802:	2f58      	cmp	r7, #88	; 0x58
 8004804:	f000 80a4 	beq.w	8004950 <_printf_i+0x170>
 8004808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800480c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004810:	e03a      	b.n	8004888 <_printf_i+0xa8>
 8004812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004816:	2b15      	cmp	r3, #21
 8004818:	d8f6      	bhi.n	8004808 <_printf_i+0x28>
 800481a:	a101      	add	r1, pc, #4	; (adr r1, 8004820 <_printf_i+0x40>)
 800481c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004820:	08004879 	.word	0x08004879
 8004824:	0800488d 	.word	0x0800488d
 8004828:	08004809 	.word	0x08004809
 800482c:	08004809 	.word	0x08004809
 8004830:	08004809 	.word	0x08004809
 8004834:	08004809 	.word	0x08004809
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004809 	.word	0x08004809
 8004840:	08004809 	.word	0x08004809
 8004844:	08004809 	.word	0x08004809
 8004848:	08004809 	.word	0x08004809
 800484c:	0800499b 	.word	0x0800499b
 8004850:	080048bd 	.word	0x080048bd
 8004854:	0800497d 	.word	0x0800497d
 8004858:	08004809 	.word	0x08004809
 800485c:	08004809 	.word	0x08004809
 8004860:	080049bd 	.word	0x080049bd
 8004864:	08004809 	.word	0x08004809
 8004868:	080048bd 	.word	0x080048bd
 800486c:	08004809 	.word	0x08004809
 8004870:	08004809 	.word	0x08004809
 8004874:	08004985 	.word	0x08004985
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	602a      	str	r2, [r5, #0]
 8004880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004888:	2301      	movs	r3, #1
 800488a:	e0a4      	b.n	80049d6 <_printf_i+0x1f6>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	6829      	ldr	r1, [r5, #0]
 8004890:	0606      	lsls	r6, r0, #24
 8004892:	f101 0304 	add.w	r3, r1, #4
 8004896:	d50a      	bpl.n	80048ae <_printf_i+0xce>
 8004898:	680e      	ldr	r6, [r1, #0]
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	2e00      	cmp	r6, #0
 800489e:	da03      	bge.n	80048a8 <_printf_i+0xc8>
 80048a0:	232d      	movs	r3, #45	; 0x2d
 80048a2:	4276      	negs	r6, r6
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	230a      	movs	r3, #10
 80048aa:	485e      	ldr	r0, [pc, #376]	; (8004a24 <_printf_i+0x244>)
 80048ac:	e019      	b.n	80048e2 <_printf_i+0x102>
 80048ae:	680e      	ldr	r6, [r1, #0]
 80048b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	bf18      	it	ne
 80048b8:	b236      	sxthne	r6, r6
 80048ba:	e7ef      	b.n	800489c <_printf_i+0xbc>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	6029      	str	r1, [r5, #0]
 80048c4:	0601      	lsls	r1, r0, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0xec>
 80048c8:	681e      	ldr	r6, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0xf2>
 80048cc:	0646      	lsls	r6, r0, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0xe8>
 80048d0:	881e      	ldrh	r6, [r3, #0]
 80048d2:	2f6f      	cmp	r7, #111	; 0x6f
 80048d4:	bf0c      	ite	eq
 80048d6:	2308      	moveq	r3, #8
 80048d8:	230a      	movne	r3, #10
 80048da:	4852      	ldr	r0, [pc, #328]	; (8004a24 <_printf_i+0x244>)
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e2:	6865      	ldr	r5, [r4, #4]
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	bfa8      	it	ge
 80048e8:	6821      	ldrge	r1, [r4, #0]
 80048ea:	60a5      	str	r5, [r4, #8]
 80048ec:	bfa4      	itt	ge
 80048ee:	f021 0104 	bicge.w	r1, r1, #4
 80048f2:	6021      	strge	r1, [r4, #0]
 80048f4:	b90e      	cbnz	r6, 80048fa <_printf_i+0x11a>
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	d04d      	beq.n	8004996 <_printf_i+0x1b6>
 80048fa:	4615      	mov	r5, r2
 80048fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004900:	fb03 6711 	mls	r7, r3, r1, r6
 8004904:	5dc7      	ldrb	r7, [r0, r7]
 8004906:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800490a:	4637      	mov	r7, r6
 800490c:	42bb      	cmp	r3, r7
 800490e:	460e      	mov	r6, r1
 8004910:	d9f4      	bls.n	80048fc <_printf_i+0x11c>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d10b      	bne.n	800492e <_printf_i+0x14e>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	07de      	lsls	r6, r3, #31
 800491a:	d508      	bpl.n	800492e <_printf_i+0x14e>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	6861      	ldr	r1, [r4, #4]
 8004920:	4299      	cmp	r1, r3
 8004922:	bfde      	ittt	le
 8004924:	2330      	movle	r3, #48	; 0x30
 8004926:	f805 3c01 	strble.w	r3, [r5, #-1]
 800492a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800492e:	1b52      	subs	r2, r2, r5
 8004930:	6122      	str	r2, [r4, #16]
 8004932:	464b      	mov	r3, r9
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f8cd a000 	str.w	sl, [sp]
 800493c:	aa03      	add	r2, sp, #12
 800493e:	f7ff fedf 	bl	8004700 <_printf_common>
 8004942:	3001      	adds	r0, #1
 8004944:	d14c      	bne.n	80049e0 <_printf_i+0x200>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b004      	add	sp, #16
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	4834      	ldr	r0, [pc, #208]	; (8004a24 <_printf_i+0x244>)
 8004952:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004956:	6829      	ldr	r1, [r5, #0]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f851 6b04 	ldr.w	r6, [r1], #4
 800495e:	6029      	str	r1, [r5, #0]
 8004960:	061d      	lsls	r5, r3, #24
 8004962:	d514      	bpl.n	800498e <_printf_i+0x1ae>
 8004964:	07df      	lsls	r7, r3, #31
 8004966:	bf44      	itt	mi
 8004968:	f043 0320 	orrmi.w	r3, r3, #32
 800496c:	6023      	strmi	r3, [r4, #0]
 800496e:	b91e      	cbnz	r6, 8004978 <_printf_i+0x198>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f023 0320 	bic.w	r3, r3, #32
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	2310      	movs	r3, #16
 800497a:	e7af      	b.n	80048dc <_printf_i+0xfc>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	2378      	movs	r3, #120	; 0x78
 8004986:	4828      	ldr	r0, [pc, #160]	; (8004a28 <_printf_i+0x248>)
 8004988:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800498c:	e7e3      	b.n	8004956 <_printf_i+0x176>
 800498e:	0659      	lsls	r1, r3, #25
 8004990:	bf48      	it	mi
 8004992:	b2b6      	uxthmi	r6, r6
 8004994:	e7e6      	b.n	8004964 <_printf_i+0x184>
 8004996:	4615      	mov	r5, r2
 8004998:	e7bb      	b.n	8004912 <_printf_i+0x132>
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	6826      	ldr	r6, [r4, #0]
 800499e:	1d18      	adds	r0, r3, #4
 80049a0:	6961      	ldr	r1, [r4, #20]
 80049a2:	6028      	str	r0, [r5, #0]
 80049a4:	0635      	lsls	r5, r6, #24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	d501      	bpl.n	80049ae <_printf_i+0x1ce>
 80049aa:	6019      	str	r1, [r3, #0]
 80049ac:	e002      	b.n	80049b4 <_printf_i+0x1d4>
 80049ae:	0670      	lsls	r0, r6, #25
 80049b0:	d5fb      	bpl.n	80049aa <_printf_i+0x1ca>
 80049b2:	8019      	strh	r1, [r3, #0]
 80049b4:	2300      	movs	r3, #0
 80049b6:	4615      	mov	r5, r2
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	e7ba      	b.n	8004932 <_printf_i+0x152>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	2100      	movs	r1, #0
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	681d      	ldr	r5, [r3, #0]
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 f82f 	bl	8004a2c <memchr>
 80049ce:	b108      	cbz	r0, 80049d4 <_printf_i+0x1f4>
 80049d0:	1b40      	subs	r0, r0, r5
 80049d2:	6060      	str	r0, [r4, #4]
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	2300      	movs	r3, #0
 80049da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049de:	e7a8      	b.n	8004932 <_printf_i+0x152>
 80049e0:	462a      	mov	r2, r5
 80049e2:	4649      	mov	r1, r9
 80049e4:	4640      	mov	r0, r8
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	47d0      	blx	sl
 80049ea:	3001      	adds	r0, #1
 80049ec:	d0ab      	beq.n	8004946 <_printf_i+0x166>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	079b      	lsls	r3, r3, #30
 80049f2:	d413      	bmi.n	8004a1c <_printf_i+0x23c>
 80049f4:	68e0      	ldr	r0, [r4, #12]
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	4298      	cmp	r0, r3
 80049fa:	bfb8      	it	lt
 80049fc:	4618      	movlt	r0, r3
 80049fe:	e7a4      	b.n	800494a <_printf_i+0x16a>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4632      	mov	r2, r6
 8004a04:	4649      	mov	r1, r9
 8004a06:	4640      	mov	r0, r8
 8004a08:	47d0      	blx	sl
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d09b      	beq.n	8004946 <_printf_i+0x166>
 8004a0e:	3501      	adds	r5, #1
 8004a10:	68e3      	ldr	r3, [r4, #12]
 8004a12:	9903      	ldr	r1, [sp, #12]
 8004a14:	1a5b      	subs	r3, r3, r1
 8004a16:	42ab      	cmp	r3, r5
 8004a18:	dcf2      	bgt.n	8004a00 <_printf_i+0x220>
 8004a1a:	e7eb      	b.n	80049f4 <_printf_i+0x214>
 8004a1c:	2500      	movs	r5, #0
 8004a1e:	f104 0619 	add.w	r6, r4, #25
 8004a22:	e7f5      	b.n	8004a10 <_printf_i+0x230>
 8004a24:	08004d85 	.word	0x08004d85
 8004a28:	08004d96 	.word	0x08004d96

08004a2c <memchr>:
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	b2c9      	uxtb	r1, r1
 8004a32:	4402      	add	r2, r0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	d101      	bne.n	8004a3e <memchr+0x12>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	e003      	b.n	8004a46 <memchr+0x1a>
 8004a3e:	7804      	ldrb	r4, [r0, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	428c      	cmp	r4, r1
 8004a44:	d1f6      	bne.n	8004a34 <memchr+0x8>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <memcpy>:
 8004a48:	440a      	add	r2, r1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a50:	d100      	bne.n	8004a54 <memcpy+0xc>
 8004a52:	4770      	bx	lr
 8004a54:	b510      	push	{r4, lr}
 8004a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a60:	d1f9      	bne.n	8004a56 <memcpy+0xe>
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <memmove>:
 8004a64:	4288      	cmp	r0, r1
 8004a66:	b510      	push	{r4, lr}
 8004a68:	eb01 0402 	add.w	r4, r1, r2
 8004a6c:	d902      	bls.n	8004a74 <memmove+0x10>
 8004a6e:	4284      	cmp	r4, r0
 8004a70:	4623      	mov	r3, r4
 8004a72:	d807      	bhi.n	8004a84 <memmove+0x20>
 8004a74:	1e43      	subs	r3, r0, #1
 8004a76:	42a1      	cmp	r1, r4
 8004a78:	d008      	beq.n	8004a8c <memmove+0x28>
 8004a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a82:	e7f8      	b.n	8004a76 <memmove+0x12>
 8004a84:	4601      	mov	r1, r0
 8004a86:	4402      	add	r2, r0
 8004a88:	428a      	cmp	r2, r1
 8004a8a:	d100      	bne.n	8004a8e <memmove+0x2a>
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a96:	e7f7      	b.n	8004a88 <memmove+0x24>

08004a98 <_free_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	d040      	beq.n	8004b22 <_free_r+0x8a>
 8004aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa4:	1f0c      	subs	r4, r1, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfb8      	it	lt
 8004aaa:	18e4      	addlt	r4, r4, r3
 8004aac:	f000 f910 	bl	8004cd0 <__malloc_lock>
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <_free_r+0x8c>)
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	b933      	cbnz	r3, 8004ac4 <_free_r+0x2c>
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	6014      	str	r4, [r2, #0]
 8004aba:	4628      	mov	r0, r5
 8004abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac0:	f000 b90c 	b.w	8004cdc <__malloc_unlock>
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d908      	bls.n	8004ada <_free_r+0x42>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	1821      	adds	r1, r4, r0
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf01      	itttt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	1809      	addeq	r1, r1, r0
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	e7ed      	b.n	8004ab6 <_free_r+0x1e>
 8004ada:	461a      	mov	r2, r3
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b10b      	cbz	r3, 8004ae4 <_free_r+0x4c>
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	d9fa      	bls.n	8004ada <_free_r+0x42>
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	1850      	adds	r0, r2, r1
 8004ae8:	42a0      	cmp	r0, r4
 8004aea:	d10b      	bne.n	8004b04 <_free_r+0x6c>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	4401      	add	r1, r0
 8004af0:	1850      	adds	r0, r2, r1
 8004af2:	4283      	cmp	r3, r0
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	d1e0      	bne.n	8004aba <_free_r+0x22>
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4401      	add	r1, r0
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	6053      	str	r3, [r2, #4]
 8004b02:	e7da      	b.n	8004aba <_free_r+0x22>
 8004b04:	d902      	bls.n	8004b0c <_free_r+0x74>
 8004b06:	230c      	movs	r3, #12
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	e7d6      	b.n	8004aba <_free_r+0x22>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	1821      	adds	r1, r4, r0
 8004b10:	428b      	cmp	r3, r1
 8004b12:	bf01      	itttt	eq
 8004b14:	6819      	ldreq	r1, [r3, #0]
 8004b16:	685b      	ldreq	r3, [r3, #4]
 8004b18:	1809      	addeq	r1, r1, r0
 8004b1a:	6021      	streq	r1, [r4, #0]
 8004b1c:	6063      	str	r3, [r4, #4]
 8004b1e:	6054      	str	r4, [r2, #4]
 8004b20:	e7cb      	b.n	8004aba <_free_r+0x22>
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200001f8 	.word	0x200001f8

08004b28 <sbrk_aligned>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	4e0e      	ldr	r6, [pc, #56]	; (8004b64 <sbrk_aligned+0x3c>)
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	6831      	ldr	r1, [r6, #0]
 8004b30:	4605      	mov	r5, r0
 8004b32:	b911      	cbnz	r1, 8004b3a <sbrk_aligned+0x12>
 8004b34:	f000 f8bc 	bl	8004cb0 <_sbrk_r>
 8004b38:	6030      	str	r0, [r6, #0]
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f8b7 	bl	8004cb0 <_sbrk_r>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d00a      	beq.n	8004b5c <sbrk_aligned+0x34>
 8004b46:	1cc4      	adds	r4, r0, #3
 8004b48:	f024 0403 	bic.w	r4, r4, #3
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d007      	beq.n	8004b60 <sbrk_aligned+0x38>
 8004b50:	1a21      	subs	r1, r4, r0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 f8ac 	bl	8004cb0 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d101      	bne.n	8004b60 <sbrk_aligned+0x38>
 8004b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b60:	4620      	mov	r0, r4
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	200001fc 	.word	0x200001fc

08004b68 <_malloc_r>:
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	1ccd      	adds	r5, r1, #3
 8004b6e:	f025 0503 	bic.w	r5, r5, #3
 8004b72:	3508      	adds	r5, #8
 8004b74:	2d0c      	cmp	r5, #12
 8004b76:	bf38      	it	cc
 8004b78:	250c      	movcc	r5, #12
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	db01      	blt.n	8004b84 <_malloc_r+0x1c>
 8004b80:	42a9      	cmp	r1, r5
 8004b82:	d905      	bls.n	8004b90 <_malloc_r+0x28>
 8004b84:	230c      	movs	r3, #12
 8004b86:	2600      	movs	r6, #0
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	4e2e      	ldr	r6, [pc, #184]	; (8004c4c <_malloc_r+0xe4>)
 8004b92:	f000 f89d 	bl	8004cd0 <__malloc_lock>
 8004b96:	6833      	ldr	r3, [r6, #0]
 8004b98:	461c      	mov	r4, r3
 8004b9a:	bb34      	cbnz	r4, 8004bea <_malloc_r+0x82>
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff ffc2 	bl	8004b28 <sbrk_aligned>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	d14d      	bne.n	8004c46 <_malloc_r+0xde>
 8004baa:	6834      	ldr	r4, [r6, #0]
 8004bac:	4626      	mov	r6, r4
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	d140      	bne.n	8004c34 <_malloc_r+0xcc>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	eb04 0803 	add.w	r8, r4, r3
 8004bbc:	f000 f878 	bl	8004cb0 <_sbrk_r>
 8004bc0:	4580      	cmp	r8, r0
 8004bc2:	d13a      	bne.n	8004c3a <_malloc_r+0xd2>
 8004bc4:	6821      	ldr	r1, [r4, #0]
 8004bc6:	3503      	adds	r5, #3
 8004bc8:	1a6d      	subs	r5, r5, r1
 8004bca:	f025 0503 	bic.w	r5, r5, #3
 8004bce:	3508      	adds	r5, #8
 8004bd0:	2d0c      	cmp	r5, #12
 8004bd2:	bf38      	it	cc
 8004bd4:	250c      	movcc	r5, #12
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7ff ffa5 	bl	8004b28 <sbrk_aligned>
 8004bde:	3001      	adds	r0, #1
 8004be0:	d02b      	beq.n	8004c3a <_malloc_r+0xd2>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	442b      	add	r3, r5
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	e00e      	b.n	8004c08 <_malloc_r+0xa0>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	1b52      	subs	r2, r2, r5
 8004bee:	d41e      	bmi.n	8004c2e <_malloc_r+0xc6>
 8004bf0:	2a0b      	cmp	r2, #11
 8004bf2:	d916      	bls.n	8004c22 <_malloc_r+0xba>
 8004bf4:	1961      	adds	r1, r4, r5
 8004bf6:	42a3      	cmp	r3, r4
 8004bf8:	6025      	str	r5, [r4, #0]
 8004bfa:	bf18      	it	ne
 8004bfc:	6059      	strne	r1, [r3, #4]
 8004bfe:	6863      	ldr	r3, [r4, #4]
 8004c00:	bf08      	it	eq
 8004c02:	6031      	streq	r1, [r6, #0]
 8004c04:	5162      	str	r2, [r4, r5]
 8004c06:	604b      	str	r3, [r1, #4]
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f104 060b 	add.w	r6, r4, #11
 8004c0e:	f000 f865 	bl	8004cdc <__malloc_unlock>
 8004c12:	f026 0607 	bic.w	r6, r6, #7
 8004c16:	1d23      	adds	r3, r4, #4
 8004c18:	1af2      	subs	r2, r6, r3
 8004c1a:	d0b6      	beq.n	8004b8a <_malloc_r+0x22>
 8004c1c:	1b9b      	subs	r3, r3, r6
 8004c1e:	50a3      	str	r3, [r4, r2]
 8004c20:	e7b3      	b.n	8004b8a <_malloc_r+0x22>
 8004c22:	6862      	ldr	r2, [r4, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	bf0c      	ite	eq
 8004c28:	6032      	streq	r2, [r6, #0]
 8004c2a:	605a      	strne	r2, [r3, #4]
 8004c2c:	e7ec      	b.n	8004c08 <_malloc_r+0xa0>
 8004c2e:	4623      	mov	r3, r4
 8004c30:	6864      	ldr	r4, [r4, #4]
 8004c32:	e7b2      	b.n	8004b9a <_malloc_r+0x32>
 8004c34:	4634      	mov	r4, r6
 8004c36:	6876      	ldr	r6, [r6, #4]
 8004c38:	e7b9      	b.n	8004bae <_malloc_r+0x46>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	f000 f84c 	bl	8004cdc <__malloc_unlock>
 8004c44:	e7a1      	b.n	8004b8a <_malloc_r+0x22>
 8004c46:	6025      	str	r5, [r4, #0]
 8004c48:	e7de      	b.n	8004c08 <_malloc_r+0xa0>
 8004c4a:	bf00      	nop
 8004c4c:	200001f8 	.word	0x200001f8

08004c50 <_realloc_r>:
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	4680      	mov	r8, r0
 8004c56:	4614      	mov	r4, r2
 8004c58:	460e      	mov	r6, r1
 8004c5a:	b921      	cbnz	r1, 8004c66 <_realloc_r+0x16>
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c62:	f7ff bf81 	b.w	8004b68 <_malloc_r>
 8004c66:	b92a      	cbnz	r2, 8004c74 <_realloc_r+0x24>
 8004c68:	f7ff ff16 	bl	8004a98 <_free_r>
 8004c6c:	4625      	mov	r5, r4
 8004c6e:	4628      	mov	r0, r5
 8004c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c74:	f000 f838 	bl	8004ce8 <_malloc_usable_size_r>
 8004c78:	4284      	cmp	r4, r0
 8004c7a:	4607      	mov	r7, r0
 8004c7c:	d802      	bhi.n	8004c84 <_realloc_r+0x34>
 8004c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c82:	d812      	bhi.n	8004caa <_realloc_r+0x5a>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4640      	mov	r0, r8
 8004c88:	f7ff ff6e 	bl	8004b68 <_malloc_r>
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d0ed      	beq.n	8004c6e <_realloc_r+0x1e>
 8004c92:	42bc      	cmp	r4, r7
 8004c94:	4622      	mov	r2, r4
 8004c96:	4631      	mov	r1, r6
 8004c98:	bf28      	it	cs
 8004c9a:	463a      	movcs	r2, r7
 8004c9c:	f7ff fed4 	bl	8004a48 <memcpy>
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f7ff fef8 	bl	8004a98 <_free_r>
 8004ca8:	e7e1      	b.n	8004c6e <_realloc_r+0x1e>
 8004caa:	4635      	mov	r5, r6
 8004cac:	e7df      	b.n	8004c6e <_realloc_r+0x1e>
	...

08004cb0 <_sbrk_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	4d05      	ldr	r5, [pc, #20]	; (8004ccc <_sbrk_r+0x1c>)
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fb ffe2 	bl	8000c84 <_sbrk>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_sbrk_r+0x1a>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_sbrk_r+0x1a>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000200 	.word	0x20000200

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f000 b811 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000204 	.word	0x20000204

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f000 b80c 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000204 	.word	0x20000204

08004ce8 <_malloc_usable_size_r>:
 8004ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cec:	1f18      	subs	r0, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfbc      	itt	lt
 8004cf2:	580b      	ldrlt	r3, [r1, r0]
 8004cf4:	18c0      	addlt	r0, r0, r3
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_acquire_recursive>:
 8004cf8:	4770      	bx	lr

08004cfa <__retarget_lock_release_recursive>:
 8004cfa:	4770      	bx	lr

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
