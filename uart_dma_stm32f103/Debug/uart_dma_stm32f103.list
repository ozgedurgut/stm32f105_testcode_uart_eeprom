
uart_dma_stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040e4  080040e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e4  080040e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  0800415c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800415c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c39  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba8  00000000  00000000  00027cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00029880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a5  00000000  00000000  0002a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009aa4  00000000  00000000  000422ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008524f  00000000  00000000  0004bd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0fa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002588  00000000  00000000  000d0ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004008 	.word	0x08004008

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004008 	.word	0x08004008

0800014c <sendData>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void sendData(char *data) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	len = sizeof(txdata) / sizeof(txdata[0]);
 8000154:	4b13      	ldr	r3, [pc, #76]	; (80001a4 <sendData+0x58>)
 8000156:	2208      	movs	r2, #8
 8000158:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800015a:	2300      	movs	r3, #0
 800015c:	60fb      	str	r3, [r7, #12]
 800015e:	e00b      	b.n	8000178 <sendData+0x2c>
		txdata[i] = data[i];
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	7819      	ldrb	r1, [r3, #0]
 8000168:	4a0f      	ldr	r2, [pc, #60]	; (80001a8 <sendData+0x5c>)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	4413      	add	r3, r2
 800016e:	460a      	mov	r2, r1
 8000170:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	3301      	adds	r3, #1
 8000176:	60fb      	str	r3, [r7, #12]
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <sendData+0x58>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	461a      	mov	r2, r3
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	4293      	cmp	r3, r2
 8000182:	dbed      	blt.n	8000160 <sendData+0x14>
	}
	sprintf(txdatanew, "%s",txdata);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <sendData+0x5c>)
 8000186:	4909      	ldr	r1, [pc, #36]	; (80001ac <sendData+0x60>)
 8000188:	4809      	ldr	r0, [pc, #36]	; (80001b0 <sendData+0x64>)
 800018a:	f003 fac3 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, txdatanew, 8, 500);
 800018e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000192:	2208      	movs	r2, #8
 8000194:	4906      	ldr	r1, [pc, #24]	; (80001b0 <sendData+0x64>)
 8000196:	4807      	ldr	r0, [pc, #28]	; (80001b4 <sendData+0x68>)
 8000198:	f002 fca5 	bl	8002ae6 <HAL_UART_Transmit>
}
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	200000a4 	.word	0x200000a4
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	08004020 	.word	0x08004020
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	2000010c 	.word	0x2000010c

080001b8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <HAL_UART_RxCpltCallback+0x60>)
 80001c4:	4293      	cmp	r3, r2
 80001c6:	d122      	bne.n	800020e <HAL_UART_RxCpltCallback+0x56>

		rxBuf[rxindex] = Buf_1ch[0];
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b14      	ldr	r3, [pc, #80]	; (8000220 <HAL_UART_RxCpltCallback+0x68>)
 80001d0:	7819      	ldrb	r1, [r3, #0]
 80001d2:	4b14      	ldr	r3, [pc, #80]	; (8000224 <HAL_UART_RxCpltCallback+0x6c>)
 80001d4:	5499      	strb	r1, [r3, r2]
		final_data[rxindex] = rxBuf[rxindex];
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <HAL_UART_RxCpltCallback+0x6c>)
 80001e4:	5c59      	ldrb	r1, [r3, r1]
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <HAL_UART_RxCpltCallback+0x70>)
 80001e8:	5499      	strb	r1, [r3, r2]
		rxindex++;
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	3301      	adds	r3, #1
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 80001f4:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, Buf_1ch, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	4909      	ldr	r1, [pc, #36]	; (8000220 <HAL_UART_RxCpltCallback+0x68>)
 80001fa:	4807      	ldr	r0, [pc, #28]	; (8000218 <HAL_UART_RxCpltCallback+0x60>)
 80001fc:	f002 fd05 	bl	8002c0a <HAL_UART_Receive_DMA>
		if (rxindex >= 8) {
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b07      	cmp	r3, #7
 8000206:	d902      	bls.n	800020e <HAL_UART_RxCpltCallback+0x56>
			rxindex = 0;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <HAL_UART_RxCpltCallback+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000010c 	.word	0x2000010c
 800021c:	20000098 	.word	0x20000098
 8000220:	2000008c 	.word	0x2000008c
 8000224:	20000090 	.word	0x20000090
 8000228:	2000009c 	.word	0x2000009c

0800022c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000232:	f000 fb07 	bl	8000844 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000236:	f000 f86f 	bl	8000318 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800023a:	f000 f95d 	bl	80004f8 <MX_GPIO_Init>
	MX_DMA_Init();
 800023e:	f000 f93d 	bl	80004bc <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000242:	f000 f911 	bl	8000468 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8000246:	f000 f8c5 	bl	80003d4 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart1, Buf_1ch, 1);
 800024a:	2201      	movs	r2, #1
 800024c:	4925      	ldr	r1, [pc, #148]	; (80002e4 <main+0xb8>)
 800024e:	4826      	ldr	r0, [pc, #152]	; (80002e8 <main+0xbc>)
 8000250:	f002 fcdb 	bl	8002c0a <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000254:	4b25      	ldr	r3, [pc, #148]	; (80002ec <main+0xc0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b24      	ldr	r3, [pc, #144]	; (80002ec <main+0xc0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f022 0204 	bic.w	r2, r2, #4
 8000262:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000264:	2200      	movs	r2, #0
 8000266:	4922      	ldr	r1, [pc, #136]	; (80002f0 <main+0xc4>)
 8000268:	4822      	ldr	r0, [pc, #136]	; (80002f4 <main+0xc8>)
 800026a:	f001 ff6b 	bl	8002144 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800026e:	2200      	movs	r2, #0
 8000270:	4921      	ldr	r1, [pc, #132]	; (80002f8 <main+0xcc>)
 8000272:	4820      	ldr	r0, [pc, #128]	; (80002f4 <main+0xc8>)
 8000274:	f002 f8f4 	bl	8002460 <HAL_RTC_GetDate>

		sprintf(date,"Date: %02d.%02d.%02d\t",DateToUpdate.Date,DateToUpdate.Month,DateToUpdate.Year);
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <main+0xcc>)
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	461a      	mov	r2, r3
 800027e:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <main+0xcc>)
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	4619      	mov	r1, r3
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <main+0xcc>)
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	460b      	mov	r3, r1
 800028c:	491b      	ldr	r1, [pc, #108]	; (80002fc <main+0xd0>)
 800028e:	481c      	ldr	r0, [pc, #112]	; (8000300 <main+0xd4>)
 8000290:	f003 fa40 	bl	8003714 <siprintf>
		sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <main+0xc4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <main+0xc4>)
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	4619      	mov	r1, r3
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <main+0xc4>)
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	460b      	mov	r3, r1
 80002a8:	4916      	ldr	r1, [pc, #88]	; (8000304 <main+0xd8>)
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0xdc>)
 80002ac:	f003 fa32 	bl	8003714 <siprintf>
		HAL_Delay(1000);
 80002b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b4:	f000 fb28 	bl	8000908 <HAL_Delay>

		sendData("66666666");
 80002b8:	4814      	ldr	r0, [pc, #80]	; (800030c <main+0xe0>)
 80002ba:	f7ff ff47 	bl	800014c <sendData>
		HAL_Delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f000 fb21 	bl	8000908 <HAL_Delay>
		sendData("11111111");
 80002c6:	4812      	ldr	r0, [pc, #72]	; (8000310 <main+0xe4>)
 80002c8:	f7ff ff40 	bl	800014c <sendData>
		HAL_Delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d0:	f000 fb1a 	bl	8000908 <HAL_Delay>
		sendData("44444444");
 80002d4:	480f      	ldr	r0, [pc, #60]	; (8000314 <main+0xe8>)
 80002d6:	f7ff ff39 	bl	800014c <sendData>
		HAL_Delay(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 fb13 	bl	8000908 <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80002e2:	e7bf      	b.n	8000264 <main+0x38>
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	2000010c 	.word	0x2000010c
 80002ec:	20000150 	.word	0x20000150
 80002f0:	20000194 	.word	0x20000194
 80002f4:	200000f8 	.word	0x200000f8
 80002f8:	20000198 	.word	0x20000198
 80002fc:	08004024 	.word	0x08004024
 8000300:	200000d8 	.word	0x200000d8
 8000304:	0800403c 	.word	0x0800403c
 8000308:	200000b8 	.word	0x200000b8
 800030c:	08004054 	.word	0x08004054
 8000310:	08004060 	.word	0x08004060
 8000314:	0800406c 	.word	0x0800406c

08000318 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b094      	sub	sp, #80	; 0x50
 800031c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 f9ec 	bl	8003704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000348:	2309      	movs	r3, #9
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f828 	bl	80013c8 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800037e:	f000 f8e9 	bl	8000554 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fa94 	bl	80018cc <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x96>
	{
		Error_Handler();
 80003aa:	f000 f8d3 	bl	8000554 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003ae:	2301      	movs	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b6:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fc1e 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80003c6:	f000 f8c5 	bl	8000554 <Error_Handler>
	}
}
 80003ca:	bf00      	nop
 80003cc:	3750      	adds	r7, #80	; 0x50
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2100      	movs	r1, #0
 80003de:	460a      	mov	r2, r1
 80003e0:	801a      	strh	r2, [r3, #0]
 80003e2:	460a      	mov	r2, r1
 80003e4:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_RTC_Init+0x8c>)
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_RTC_Init+0x90>)
 80003ee:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_RTC_Init+0x8c>)
 80003f2:	f04f 32ff 	mov.w	r2, #4294967295
 80003f6:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_RTC_Init+0x8c>)
 80003fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fe:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000400:	4817      	ldr	r0, [pc, #92]	; (8000460 <MX_RTC_Init+0x8c>)
 8000402:	f001 fd71 	bl	8001ee8 <HAL_RTC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_RTC_Init+0x3c>
	{
		Error_Handler();
 800040c:	f000 f8a2 	bl	8000554 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 9;
 8000410:	2309      	movs	r3, #9
 8000412:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 35;
 8000414:	2323      	movs	r3, #35	; 0x23
 8000416:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <MX_RTC_Init+0x8c>)
 8000424:	f001 fdf6 	bl	8002014 <HAL_RTC_SetTime>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_RTC_Init+0x5e>
	{
		Error_Handler();
 800042e:	f000 f891 	bl	8000554 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000432:	2302      	movs	r3, #2
 8000434:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8000436:	2302      	movs	r3, #2
 8000438:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 14;
 800043a:	230e      	movs	r3, #14
 800043c:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 23;
 800043e:	2317      	movs	r3, #23
 8000440:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_RTC_Init+0x8c>)
 800044a:	f001 ff53 	bl	80022f4 <HAL_RTC_SetDate>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_RTC_Init+0x84>
	{
		Error_Handler();
 8000454:	f000 f87e 	bl	8000554 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000f8 	.word	0x200000f8
 8000464:	40002800 	.word	0x40002800

08000468 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <MX_USART1_UART_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000478:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_USART1_UART_Init+0x4c>)
 80004a0:	f002 fad4 	bl	8002a4c <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80004aa:	f000 f853 	bl	8000554 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000010c 	.word	0x2000010c
 80004b8:	40013800 	.word	0x40013800

080004bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_DMA_Init+0x38>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <MX_DMA_Init+0x38>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_DMA_Init+0x38>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	200f      	movs	r0, #15
 80004e0:	f000 fb0d 	bl	8000afe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e4:	200f      	movs	r0, #15
 80004e6:	f000 fb26 	bl	8000b36 <HAL_NVIC_EnableIRQ>

}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_GPIO_Init+0x58>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <MX_GPIO_Init+0x58>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_GPIO_Init+0x58>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0310 	and.w	r3, r3, #16
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_GPIO_Init+0x58>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <MX_GPIO_Init+0x58>)
 800051c:	f043 0320 	orr.w	r3, r3, #32
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_GPIO_Init+0x58>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_GPIO_Init+0x58>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <MX_GPIO_Init+0x58>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_GPIO_Init+0x58>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <HAL_MspInit+0x5c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x5c>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_MspInit+0x60>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_MspInit+0x60>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010000 	.word	0x40010000

080005c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_RTC_MspInit+0x3c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d110      	bne.n	80005f8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005d6:	f000 feeb 	bl	80013b0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_RTC_MspInit+0x40>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <HAL_RTC_MspInit+0x40>)
 80005e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_RTC_MspInit+0x40>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_RTC_MspInit+0x44>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40002800 	.word	0x40002800
 8000604:	40021000 	.word	0x40021000
 8000608:	4242043c 	.word	0x4242043c

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <HAL_UART_MspInit+0xe8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d15f      	bne.n	80006ec <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <HAL_UART_MspInit+0xec>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <HAL_UART_MspInit+0xec>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <HAL_UART_MspInit+0xec>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <HAL_UART_MspInit+0xec>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <HAL_UART_MspInit+0xec>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <HAL_UART_MspInit+0xec>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4822      	ldr	r0, [pc, #136]	; (80006fc <HAL_UART_MspInit+0xf0>)
 8000672:	f000 fd19 	bl	80010a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	481c      	ldr	r0, [pc, #112]	; (80006fc <HAL_UART_MspInit+0xf0>)
 800068c:	f000 fd0c 	bl	80010a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_UART_MspInit+0xf4>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_UART_MspInit+0xf8>)
 8000694:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_UART_MspInit+0xf4>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_UART_MspInit+0xf4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006c2:	f000 fa53 	bl	8000b6c <HAL_DMA_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80006cc:	f7ff ff42 	bl	8000554 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_UART_MspInit+0xf4>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2025      	movs	r0, #37	; 0x25
 80006e2:	f000 fa0c 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006e6:	2025      	movs	r0, #37	; 0x25
 80006e8:	f000 fa25 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800
 8000700:	20000150 	.word	0x20000150
 8000704:	40020058 	.word	0x40020058

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f000 f8bf 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <DMA1_Channel5_IRQHandler+0x10>)
 800075e:	f000 fb6f 	bl	8000e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000150 	.word	0x20000150

0800076c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USART1_IRQHandler+0x10>)
 8000772:	f002 fa7b 	bl	8002c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000010c 	.word	0x2000010c

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f002 ff7e 	bl	80036b0 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	2000019c 	.word	0x2000019c
 80007e8:	200001b8 	.word	0x200001b8

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffe5 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 ff4b 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd01 	bl	800022c <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000834:	080040ec 	.word	0x080040ec
  ldr r2, =_sbss
 8000838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800083c:	200001b4 	.word	0x200001b4

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f947 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe7e 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f95f 	bl	8000b52 <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f927 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	200001a0 	.word	0x200001a0

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	200001a0 	.word	0x200001a0

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffe0 	bl	80008f4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <__NVIC_EnableIRQ+0x34>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff2d 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff42 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff35 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e043      	b.n	8000c0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_DMA_Init+0xa8>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <HAL_DMA_Init+0xac>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	009a      	lsls	r2, r3, #2
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_DMA_Init+0xb0>)
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	bffdfff8 	.word	0xbffdfff8
 8000c18:	cccccccd 	.word	0xcccccccd
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <HAL_DMA_Start_IT+0x20>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e04a      	b.n	8000cd6 <HAL_DMA_Start_IT+0xb6>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d13a      	bne.n	8000cc8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2202      	movs	r2, #2
 8000c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 f9e8 	bl	800104c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d008      	beq.n	8000c96 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 020e 	orr.w	r2, r2, #14
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e00f      	b.n	8000cb6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0204 	bic.w	r2, r2, #4
 8000ca4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 020a 	orr.w	r2, r2, #10
 8000cb4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0201 	orr.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e005      	b.n	8000cd4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d008      	beq.n	8000d06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e020      	b.n	8000d48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 020e 	bic.w	r2, r2, #14
 8000d14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d005      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e051      	b.n	8000e1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 020e 	bic.w	r2, r2, #14
 8000d84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <HAL_DMA_Abort_IT+0xd0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d029      	beq.n	8000df4 <HAL_DMA_Abort_IT+0xa0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <HAL_DMA_Abort_IT+0xd4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d022      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x9c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_DMA_Abort_IT+0xd8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d01a      	beq.n	8000dea <HAL_DMA_Abort_IT+0x96>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_DMA_Abort_IT+0xdc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d012      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x90>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_DMA_Abort_IT+0xe0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00a      	beq.n	8000dde <HAL_DMA_Abort_IT+0x8a>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_DMA_Abort_IT+0xe4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d102      	bne.n	8000dd8 <HAL_DMA_Abort_IT+0x84>
 8000dd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dd6:	e00e      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ddc:	e00b      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	e008      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	e005      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	e002      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000df0:	2310      	movs	r3, #16
 8000df2:	e000      	b.n	8000df6 <HAL_DMA_Abort_IT+0xa2>
 8000df4:	2301      	movs	r3, #1
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_DMA_Abort_IT+0xe8>)
 8000df8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	4798      	blx	r3
    } 
  }
  return status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40020008 	.word	0x40020008
 8000e28:	4002001c 	.word	0x4002001c
 8000e2c:	40020030 	.word	0x40020030
 8000e30:	40020044 	.word	0x40020044
 8000e34:	40020058 	.word	0x40020058
 8000e38:	4002006c 	.word	0x4002006c
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d04f      	beq.n	8000f08 <HAL_DMA_IRQHandler+0xc8>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d04a      	beq.n	8000f08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0204 	bic.w	r2, r2, #4
 8000e8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a66      	ldr	r2, [pc, #408]	; (8001030 <HAL_DMA_IRQHandler+0x1f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d029      	beq.n	8000eee <HAL_DMA_IRQHandler+0xae>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a65      	ldr	r2, [pc, #404]	; (8001034 <HAL_DMA_IRQHandler+0x1f4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d022      	beq.n	8000eea <HAL_DMA_IRQHandler+0xaa>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a63      	ldr	r2, [pc, #396]	; (8001038 <HAL_DMA_IRQHandler+0x1f8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01a      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0xa4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a62      	ldr	r2, [pc, #392]	; (800103c <HAL_DMA_IRQHandler+0x1fc>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d012      	beq.n	8000ede <HAL_DMA_IRQHandler+0x9e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_DMA_IRQHandler+0x200>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x98>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a5f      	ldr	r2, [pc, #380]	; (8001044 <HAL_DMA_IRQHandler+0x204>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d102      	bne.n	8000ed2 <HAL_DMA_IRQHandler+0x92>
 8000ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed0:	e00e      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000ed2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ed6:	e00b      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000edc:	e008      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee2:	e005      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	e002      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	e000      	b.n	8000ef0 <HAL_DMA_IRQHandler+0xb0>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_DMA_IRQHandler+0x208>)
 8000ef2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8094 	beq.w	8001026 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f06:	e08e      	b.n	8001026 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d056      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x186>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d051      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10b      	bne.n	8000f48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 020a 	bic.w	r2, r2, #10
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a38      	ldr	r2, [pc, #224]	; (8001030 <HAL_DMA_IRQHandler+0x1f0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d029      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x166>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a37      	ldr	r2, [pc, #220]	; (8001034 <HAL_DMA_IRQHandler+0x1f4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d022      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x162>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <HAL_DMA_IRQHandler+0x1f8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01a      	beq.n	8000f9c <HAL_DMA_IRQHandler+0x15c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a34      	ldr	r2, [pc, #208]	; (800103c <HAL_DMA_IRQHandler+0x1fc>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d012      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x156>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_DMA_IRQHandler+0x200>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00a      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x150>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <HAL_DMA_IRQHandler+0x204>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d102      	bne.n	8000f8a <HAL_DMA_IRQHandler+0x14a>
 8000f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f88:	e00e      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8e:	e00b      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	e008      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	e005      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa0:	e002      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	e000      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x168>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <HAL_DMA_IRQHandler+0x208>)
 8000faa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d034      	beq.n	8001026 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fc4:	e02f      	b.n	8001026 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2208      	movs	r2, #8
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d028      	beq.n	8001028 <HAL_DMA_IRQHandler+0x1e8>
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d023      	beq.n	8001028 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 020e 	bic.w	r2, r2, #14
 8000fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	4798      	blx	r3
    }
  }
  return;
 8001026:	bf00      	nop
 8001028:	bf00      	nop
}
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020008 	.word	0x40020008
 8001034:	4002001c 	.word	0x4002001c
 8001038:	40020030 	.word	0x40020030
 800103c:	40020044 	.word	0x40020044
 8001040:	40020058 	.word	0x40020058
 8001044:	4002006c 	.word	0x4002006c
 8001048:	40020000 	.word	0x40020000

0800104c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d108      	bne.n	800108c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800108a:	e007      	b.n	800109c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e169      	b.n	8001390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010bc:	2201      	movs	r2, #1
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8158 	bne.w	800138a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4a9a      	ldr	r2, [pc, #616]	; (8001348 <HAL_GPIO_Init+0x2a0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d05e      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010e4:	4a98      	ldr	r2, [pc, #608]	; (8001348 <HAL_GPIO_Init+0x2a0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d875      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010ea:	4a98      	ldr	r2, [pc, #608]	; (800134c <HAL_GPIO_Init+0x2a4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d058      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010f0:	4a96      	ldr	r2, [pc, #600]	; (800134c <HAL_GPIO_Init+0x2a4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d86f      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 80010f6:	4a96      	ldr	r2, [pc, #600]	; (8001350 <HAL_GPIO_Init+0x2a8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d052      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 80010fc:	4a94      	ldr	r2, [pc, #592]	; (8001350 <HAL_GPIO_Init+0x2a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d869      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001102:	4a94      	ldr	r2, [pc, #592]	; (8001354 <HAL_GPIO_Init+0x2ac>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04c      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001108:	4a92      	ldr	r2, [pc, #584]	; (8001354 <HAL_GPIO_Init+0x2ac>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d863      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800110e:	4a92      	ldr	r2, [pc, #584]	; (8001358 <HAL_GPIO_Init+0x2b0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d046      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
 8001114:	4a90      	ldr	r2, [pc, #576]	; (8001358 <HAL_GPIO_Init+0x2b0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d85d      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 800111a:	2b12      	cmp	r3, #18
 800111c:	d82a      	bhi.n	8001174 <HAL_GPIO_Init+0xcc>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d859      	bhi.n	80011d6 <HAL_GPIO_Init+0x12e>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <HAL_GPIO_Init+0x80>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	080011a3 	.word	0x080011a3
 800112c:	0800117d 	.word	0x0800117d
 8001130:	0800118f 	.word	0x0800118f
 8001134:	080011d1 	.word	0x080011d1
 8001138:	080011d7 	.word	0x080011d7
 800113c:	080011d7 	.word	0x080011d7
 8001140:	080011d7 	.word	0x080011d7
 8001144:	080011d7 	.word	0x080011d7
 8001148:	080011d7 	.word	0x080011d7
 800114c:	080011d7 	.word	0x080011d7
 8001150:	080011d7 	.word	0x080011d7
 8001154:	080011d7 	.word	0x080011d7
 8001158:	080011d7 	.word	0x080011d7
 800115c:	080011d7 	.word	0x080011d7
 8001160:	080011d7 	.word	0x080011d7
 8001164:	080011d7 	.word	0x080011d7
 8001168:	080011d7 	.word	0x080011d7
 800116c:	08001185 	.word	0x08001185
 8001170:	08001199 	.word	0x08001199
 8001174:	4a79      	ldr	r2, [pc, #484]	; (800135c <HAL_GPIO_Init+0x2b4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117a:	e02c      	b.n	80011d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e029      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	3304      	adds	r3, #4
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e024      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	3308      	adds	r3, #8
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e01f      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	330c      	adds	r3, #12
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e01a      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011aa:	2304      	movs	r3, #4
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e013      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	611a      	str	r2, [r3, #16]
          break;
 80011c2:	e009      	b.n	80011d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	615a      	str	r2, [r3, #20]
          break;
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x130>
          break;
 80011d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d801      	bhi.n	80011e2 <HAL_GPIO_Init+0x13a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_Init+0x13e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3304      	adds	r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d802      	bhi.n	80011f4 <HAL_GPIO_Init+0x14c>
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x152>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3b08      	subs	r3, #8
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	210f      	movs	r1, #15
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	6a39      	ldr	r1, [r7, #32]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80b1 	beq.w	800138a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001228:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x2b8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_GPIO_Init+0x2b8>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x2b8>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001240:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x2bc>)
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <HAL_GPIO_Init+0x2c0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_GPIO_Init+0x1ec>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3f      	ldr	r2, [pc, #252]	; (800136c <HAL_GPIO_Init+0x2c4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d00d      	beq.n	8001290 <HAL_GPIO_Init+0x1e8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3e      	ldr	r2, [pc, #248]	; (8001370 <HAL_GPIO_Init+0x2c8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d007      	beq.n	800128c <HAL_GPIO_Init+0x1e4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <HAL_GPIO_Init+0x2cc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d101      	bne.n	8001288 <HAL_GPIO_Init+0x1e0>
 8001284:	2303      	movs	r3, #3
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001288:	2304      	movs	r3, #4
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001294:	2300      	movs	r3, #0
 8001296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012a6:	492f      	ldr	r1, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x2bc>)
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	492c      	ldr	r1, [pc, #176]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4928      	ldr	r1, [pc, #160]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012d8:	4013      	ands	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4922      	ldr	r1, [pc, #136]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	491e      	ldr	r1, [pc, #120]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001300:	4013      	ands	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	4918      	ldr	r1, [pc, #96]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4914      	ldr	r1, [pc, #80]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d021      	beq.n	800137c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
 8001344:	e021      	b.n	800138a <HAL_GPIO_Init+0x2e2>
 8001346:	bf00      	nop
 8001348:	10320000 	.word	0x10320000
 800134c:	10310000 	.word	0x10310000
 8001350:	10220000 	.word	0x10220000
 8001354:	10210000 	.word	0x10210000
 8001358:	10120000 	.word	0x10120000
 800135c:	10110000 	.word	0x10110000
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000
 8001368:	40010800 	.word	0x40010800
 800136c:	40010c00 	.word	0x40010c00
 8001370:	40011000 	.word	0x40011000
 8001374:	40011400 	.word	0x40011400
 8001378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_GPIO_Init+0x304>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	43db      	mvns	r3, r3
 8001384:	4909      	ldr	r1, [pc, #36]	; (80013ac <HAL_GPIO_Init+0x304>)
 8001386:	4013      	ands	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	3301      	adds	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f ae8e 	bne.w	80010bc <HAL_GPIO_Init+0x14>
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	372c      	adds	r7, #44	; 0x2c
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	420e0020 	.word	0x420e0020

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e272      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8087 	beq.w	80014f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f4:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x12c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d168      	bne.n	80014f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e24c      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x76>
 8001430:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e02e      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7a      	ldr	r2, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0xbc>
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a71      	ldr	r2, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a67      	ldr	r2, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa26 	bl	80008f4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fa22 	bl	80008f4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e200      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xe4>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa12 	bl	80008f4 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fa0e 	bl	80008f4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ec      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x10c>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c0      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4939      	ldr	r1, [pc, #228]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f9c7 	bl	80008f4 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff f9c3 	bl	80008f4 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9a6 	bl	80008f4 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff f9a2 	bl	80008f4 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e180      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03a      	beq.n	800164c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d019      	beq.n	8001612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_RCC_OscConfig+0x274>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff f986 	bl	80008f4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff f982 	bl	80008f4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e160      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f000 fad8 	bl	8001bc0 <RCC_Delay>
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_RCC_OscConfig+0x274>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f96c 	bl	80008f4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f968 	bl	80008f4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d908      	bls.n	8001640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e146      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	42420000 	.word	0x42420000
 800163c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a6 	beq.w	80017a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10d      	bne.n	8001686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff f929 	bl	80008f4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff f925 	bl	80008f4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e103      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x312>
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e02d      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x334>
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	e01c      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x356>
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a60      	ldr	r2, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a5d      	ldr	r2, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 800171e:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a5a      	ldr	r2, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d015      	beq.n	800176a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f8d9 	bl	80008f4 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff f8d5 	bl	80008f4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ee      	beq.n	8001746 <HAL_RCC_OscConfig+0x37e>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f8c3 	bl	80008f4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f8bf 	bl	80008f4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d061      	beq.n	8001880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d146      	bne.n	8001852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff f893 	bl	80008f4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff f88f 	bl	80008f4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e06d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d108      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4921      	ldr	r1, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a19      	ldr	r1, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	430b      	orrs	r3, r1
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f863 	bl	80008f4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f85f 	bl	80008f4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x46a>
 8001850:	e035      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff f84c 	bl	80008f4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f848 	bl	80008f4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e026      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x498>
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x500>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7fe ff9a 	bl	80008f4 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7fe ff96 	bl	80008f4 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fef8 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08004098 	.word	0x08004098
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b490      	push	{r4, r7}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xac>)
 8001aa8:	1d3c      	adds	r4, r7, #4
 8001aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab0:	f240 2301 	movw	r3, #513	; 0x201
 8001ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ade:	e02b      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ae2:	623b      	str	r3, [r7, #32]
      break;
 8001ae4:	e02b      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3328      	adds	r3, #40	; 0x28
 8001af0:	443b      	add	r3, r7
 8001af2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0c5b      	lsrs	r3, r3, #17
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	3328      	adds	r3, #40	; 0x28
 8001b0e:	443b      	add	r3, r7
 8001b10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e004      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	623b      	str	r3, [r7, #32]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3a:	623b      	str	r3, [r7, #32]
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc90      	pop	{r4, r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	08004078 	.word	0x08004078
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200
 8001b58:	003d0900 	.word	0x003d0900

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff2 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	080040a8 	.word	0x080040a8

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	0adb      	lsrs	r3, r3, #11
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	080040a8 	.word	0x080040a8

08001bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <RCC_Delay+0x34>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <RCC_Delay+0x38>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bdc:	bf00      	nop
  }
  while (Delay --);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	60fa      	str	r2, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <RCC_Delay+0x1c>
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d07d      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	61d3      	str	r3, [r2, #28]
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d118      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5c:	f7fe fe4a 	bl	80008f4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	e008      	b.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c64:	f7fe fe46 	bl	80008f4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e06d      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d02e      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d027      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb6:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fe15 	bl	80008f4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7fe fe11 	bl	80008f4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e036      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4917      	ldr	r1, [pc, #92]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	490b      	ldr	r1, [pc, #44]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4904      	ldr	r1, [pc, #16]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42420440 	.word	0x42420440

08001d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08d      	sub	sp, #52	; 0x34
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d70:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001d72:	f107 040c 	add.w	r4, r7, #12
 8001d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d7c:	f240 2301 	movw	r3, #513	; 0x201
 8001d80:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	f200 808e 	bhi.w	8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d049      	beq.n	8001e3e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d079      	beq.n	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001db0:	e086      	b.n	8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d07f      	beq.n	8001ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	3330      	adds	r3, #48	; 0x30
 8001dce:	443b      	add	r3, r7
 8001dd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dd4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de0:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c5b      	lsrs	r3, r3, #17
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	3330      	adds	r3, #48	; 0x30
 8001dec:	443b      	add	r3, r7
 8001dee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001dfe:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0e:	e004      	b.n	8001e1a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e26:	d102      	bne.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e2c:	e04a      	b.n	8001ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e3c:	e042      	b.n	8001ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d108      	bne.n	8001e62 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e60:	e01f      	b.n	8001ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001e7a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e80:	e00f      	b.n	8001ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001e9a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ea0:	e012      	b.n	8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001ea2:	e011      	b.n	8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001ea4:	f7ff fe78 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0b9b      	lsrs	r3, r3, #14
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ebe:	e004      	b.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001ec0:	bf00      	nop
 8001ec2:	e002      	b.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001ec8:	bf00      	nop
    }
  }
  return (frequency);
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3734      	adds	r7, #52	; 0x34
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	08004088 	.word	0x08004088
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	003d0900 	.word	0x003d0900
 8001ee4:	aaaaaaab 	.word	0xaaaaaaab

08001ee8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e084      	b.n	8002008 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7c5b      	ldrb	r3, [r3, #17]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fb58 	bl	80005c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 faf4 	bl	8002508 <HAL_RTC_WaitForSynchro>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e06b      	b.n	8002008 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fbad 	bl	8002690 <RTC_EnterInitMode>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e060      	b.n	8002008 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0207 	bic.w	r2, r2, #7
 8001f54:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RTC_Init+0x128>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_RTC_Init+0x128>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RTC_Init+0x128>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4926      	ldr	r1, [pc, #152]	; (8002010 <HAL_RTC_Init+0x128>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d003      	beq.n	8001f8e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e00e      	b.n	8001fac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff feea 	bl	8001d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f94:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d104      	bne.n	8001fa6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e030      	b.n	8002008 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 010f 	bic.w	r1, r3, #15
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	0c1a      	lsrs	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	b291      	uxth	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fb81 	bl	80026e0 <RTC_ExitInitMode>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00c      	b.n	8002008 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40006c00 	.word	0x40006c00

08002014 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_RTC_SetTime+0x20>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e080      	b.n	800213a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	7c1b      	ldrb	r3, [r3, #16]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_RTC_SetTime+0x30>
 8002040:	2302      	movs	r3, #2
 8002042:	e07a      	b.n	800213a <HAL_RTC_SetTime+0x126>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2202      	movs	r2, #2
 800204e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d113      	bne.n	800207e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002060:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	4619      	mov	r1, r3
 800206a:	460b      	mov	r3, r1
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a5b      	subs	r3, r3, r1
 8002070:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002072:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002078:	4413      	add	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	e01e      	b.n	80020bc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fb71 	bl	800276a <RTC_Bcd2ToByte>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002090:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fb66 	bl	800276a <RTC_Bcd2ToByte>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80020aa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fb5a 	bl	800276a <RTC_Bcd2ToByte>
 80020b6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80020b8:	4423      	add	r3, r4
 80020ba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fa7f 	bl	80025c2 <RTC_WriteTimeCounter>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2204      	movs	r2, #4
 80020ce:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02f      	b.n	800213a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0205 	bic.w	r2, r2, #5
 80020e8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fa90 	bl	8002610 <RTC_ReadAlarmCounter>
 80020f0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d018      	beq.n	800212c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d214      	bcs.n	800212c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002108:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800210c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800210e:	6939      	ldr	r1, [r7, #16]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fa96 	bl	8002642 <RTC_WriteAlarmCounter>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2204      	movs	r2, #4
 8002120:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e006      	b.n	800213a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
	...

08002144 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_RTC_GetTime+0x28>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b5      	b.n	80022dc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0ac      	b.n	80022dc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f9ed 	bl	8002562 <RTC_ReadTimeCounter>
 8002188:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_RTC_GetTime+0x1a0>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0adb      	lsrs	r3, r3, #11
 8002194:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RTC_GetTime+0x1a0>)
 800219a:	fba3 1302 	umull	r1, r3, r3, r2
 800219e:	0adb      	lsrs	r3, r3, #11
 80021a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a4f      	ldr	r2, [pc, #316]	; (80022e8 <HAL_RTC_GetTime+0x1a4>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <HAL_RTC_GetTime+0x1a0>)
 80021bc:	fba2 1203 	umull	r1, r2, r2, r3
 80021c0:	0ad2      	lsrs	r2, r2, #11
 80021c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80021c6:	fb01 f202 	mul.w	r2, r1, r2
 80021ca:	1a9a      	subs	r2, r3, r2
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RTC_GetTime+0x1a4>)
 80021ce:	fba3 1302 	umull	r1, r3, r3, r2
 80021d2:	0959      	lsrs	r1, r3, #5
 80021d4:	460b      	mov	r3, r1
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a5b      	subs	r3, r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	1ad1      	subs	r1, r2, r3
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b17      	cmp	r3, #23
 80021e8:	d955      	bls.n	8002296 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a3f      	ldr	r2, [pc, #252]	; (80022ec <HAL_RTC_GetTime+0x1a8>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_RTC_GetTime+0x1a8>)
 80021fa:	fba3 2301 	umull	r2, r3, r3, r1
 80021fe:	091a      	lsrs	r2, r3, #4
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1aca      	subs	r2, r1, r3
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f9fd 	bl	8002610 <RTC_ReadAlarmCounter>
 8002216:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221e:	d008      	beq.n	8002232 <HAL_RTC_GetTime+0xee>
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d904      	bls.n	8002232 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	e002      	b.n	8002238 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_RTC_GetTime+0x1ac>)
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f9ba 	bl	80025c2 <RTC_WriteTimeCounter>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e041      	b.n	80022dc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d00c      	beq.n	800227a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4413      	add	r3, r2
 8002266:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002268:	69f9      	ldr	r1, [r7, #28]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9e9 	bl	8002642 <RTC_WriteAlarmCounter>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e030      	b.n	80022dc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800227a:	69f9      	ldr	r1, [r7, #28]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9e0 	bl	8002642 <RTC_WriteAlarmCounter>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e027      	b.n	80022dc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800228c:	6979      	ldr	r1, [r7, #20]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa88 	bl	80027a4 <RTC_DateUpdate>
 8002294:	e003      	b.n	800229e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01a      	beq.n	80022da <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fa41 	bl	8002730 <RTC_ByteToBcd2>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fa38 	bl	8002730 <RTC_ByteToBcd2>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	789b      	ldrb	r3, [r3, #2]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fa2f 	bl	8002730 <RTC_ByteToBcd2>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	91a2b3c5 	.word	0x91a2b3c5
 80022e8:	88888889 	.word	0x88888889
 80022ec:	aaaaaaab 	.word	0xaaaaaaab
 80022f0:	00015180 	.word	0x00015180

080022f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RTC_SetDate+0x24>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e097      	b.n	800244c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	7c1b      	ldrb	r3, [r3, #16]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_RTC_SetDate+0x34>
 8002324:	2302      	movs	r3, #2
 8002326:	e091      	b.n	800244c <HAL_RTC_SetDate+0x158>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	78da      	ldrb	r2, [r3, #3]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785a      	ldrb	r2, [r3, #1]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	789a      	ldrb	r2, [r3, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	739a      	strb	r2, [r3, #14]
 8002352:	e01a      	b.n	800238a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	78db      	ldrb	r3, [r3, #3]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa06 	bl	800276a <RTC_Bcd2ToByte>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f9fd 	bl	800276a <RTC_Bcd2ToByte>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	789b      	ldrb	r3, [r3, #2]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f9f4 	bl	800276a <RTC_Bcd2ToByte>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	7bdb      	ldrb	r3, [r3, #15]
 800238e:	4618      	mov	r0, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	7b59      	ldrb	r1, [r3, #13]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	7b9b      	ldrb	r3, [r3, #14]
 8002398:	461a      	mov	r2, r3
 800239a:	f000 fadf 	bl	800295c <RTC_WeekDayNum>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	7b1a      	ldrb	r2, [r3, #12]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f8d7 	bl	8002562 <RTC_ReadTimeCounter>
 80023b4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <HAL_RTC_SetDate+0x160>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b18      	cmp	r3, #24
 80023c6:	d93a      	bls.n	800243e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_RTC_SetDate+0x164>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_RTC_SetDate+0x168>)
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80023de:	69f9      	ldr	r1, [r7, #28]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f8ee 	bl	80025c2 <RTC_WriteTimeCounter>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2204      	movs	r2, #4
 80023f0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e027      	b.n	800244c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f907 	bl	8002610 <RTC_ReadAlarmCounter>
 8002402:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d018      	beq.n	800243e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	429a      	cmp	r2, r3
 8002412:	d214      	bcs.n	800243e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800241a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800241e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f90d 	bl	8002642 <RTC_WriteAlarmCounter>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2204      	movs	r2, #4
 8002432:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e006      	b.n	800244c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	91a2b3c5 	.word	0x91a2b3c5
 8002458:	aaaaaaab 	.word	0xaaaaaaab
 800245c:	00015180 	.word	0x00015180

08002460 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2100      	movs	r1, #0
 8002472:	460a      	mov	r2, r1
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	460a      	mov	r2, r1
 8002478:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_RTC_GetDate+0x26>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e03a      	b.n	8002500 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fe56 	bl	8002144 <HAL_RTC_GetTime>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e02e      	b.n	8002500 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	7b1a      	ldrb	r2, [r3, #12]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	7bda      	ldrb	r2, [r3, #15]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	7b5a      	ldrb	r2, [r3, #13]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	7b9a      	ldrb	r2, [r3, #14]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01a      	beq.n	80024fe <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f92f 	bl	8002730 <RTC_ByteToBcd2>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f926 	bl	8002730 <RTC_ByteToBcd2>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	789b      	ldrb	r3, [r3, #2]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f91d 	bl	8002730 <RTC_ByteToBcd2>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01d      	b.n	800255a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800252e:	f7fe f9e1 	bl	80008f4 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002534:	e009      	b.n	800254a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002536:	f7fe f9dd 	bl	80008f4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002544:	d901      	bls.n	800254a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e007      	b.n	800255a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	827b      	strh	r3, [r7, #18]
 800256e:	2300      	movs	r3, #0
 8002570:	823b      	strh	r3, [r7, #16]
 8002572:	2300      	movs	r3, #0
 8002574:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002592:	8a7a      	ldrh	r2, [r7, #18]
 8002594:	8a3b      	ldrh	r3, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d008      	beq.n	80025ac <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800259a:	8a3b      	ldrh	r3, [r7, #16]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e004      	b.n	80025b6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	89fb      	ldrh	r3, [r7, #14]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80025b6:	697b      	ldr	r3, [r7, #20]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f85d 	bl	8002690 <RTC_EnterInitMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e011      	b.n	8002606 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	0c12      	lsrs	r2, r2, #16
 80025ea:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b292      	uxth	r2, r2
 80025f4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f872 	bl	80026e0 <RTC_ExitInitMode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	81fb      	strh	r3, [r7, #14]
 800261c:	2300      	movs	r3, #0
 800261e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	041a      	lsls	r2, r3, #16
 8002634:	89bb      	ldrh	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f81d 	bl	8002690 <RTC_EnterInitMode>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e011      	b.n	8002686 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	0c12      	lsrs	r2, r2, #16
 800266a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b292      	uxth	r2, r2
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f832 	bl	80026e0 <RTC_ExitInitMode>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800269c:	f7fe f92a 	bl	80008f4 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026a2:	e009      	b.n	80026b8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026a4:	f7fe f926 	bl	80008f4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b2:	d901      	bls.n	80026b8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e00f      	b.n	80026d8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ee      	beq.n	80026a4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0210 	orr.w	r2, r2, #16
 80026d4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0210 	bic.w	r2, r2, #16
 80026fa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80026fc:	f7fe f8fa 	bl	80008f4 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002702:	e009      	b.n	8002718 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002704:	f7fe f8f6 	bl	80008f4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002712:	d901      	bls.n	8002718 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e007      	b.n	8002728 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800273e:	e005      	b.n	800274c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3b0a      	subs	r3, #10
 800274a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d8f6      	bhi.n	8002740 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	b2da      	uxtb	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4313      	orrs	r3, r2
 800275e:	b2db      	uxtb	r3, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4413      	add	r3, r2
 8002798:	b2db      	uxtb	r3, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7bdb      	ldrb	r3, [r3, #15]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7b5b      	ldrb	r3, [r3, #13]
 80027c8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b9b      	ldrb	r3, [r3, #14]
 80027ce:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e06f      	b.n	80028b6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d011      	beq.n	8002800 <RTC_DateUpdate+0x5c>
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d00e      	beq.n	8002800 <RTC_DateUpdate+0x5c>
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d00b      	beq.n	8002800 <RTC_DateUpdate+0x5c>
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b07      	cmp	r3, #7
 80027ec:	d008      	beq.n	8002800 <RTC_DateUpdate+0x5c>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d005      	beq.n	8002800 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b0a      	cmp	r3, #10
 80027f8:	d002      	beq.n	8002800 <RTC_DateUpdate+0x5c>
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d117      	bne.n	8002830 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b1e      	cmp	r3, #30
 8002804:	d803      	bhi.n	800280e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800280c:	e050      	b.n	80028b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d005      	beq.n	8002820 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3301      	adds	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
          day = 1U;
 800281a:	2301      	movs	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800281e:	e047      	b.n	80028b0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002820:	2301      	movs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002824:	2301      	movs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
          year++;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800282e:	e03f      	b.n	80028b0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d008      	beq.n	8002848 <RTC_DateUpdate+0xa4>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b06      	cmp	r3, #6
 800283a:	d005      	beq.n	8002848 <RTC_DateUpdate+0xa4>
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b09      	cmp	r3, #9
 8002840:	d002      	beq.n	8002848 <RTC_DateUpdate+0xa4>
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b0b      	cmp	r3, #11
 8002846:	d10c      	bne.n	8002862 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b1d      	cmp	r3, #29
 800284c:	d803      	bhi.n	8002856 <RTC_DateUpdate+0xb2>
      {
        day++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3301      	adds	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002854:	e02c      	b.n	80028b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	3301      	adds	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800285c:	2301      	movs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002860:	e026      	b.n	80028b0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b1b      	cmp	r3, #27
 800286c:	d803      	bhi.n	8002876 <RTC_DateUpdate+0xd2>
      {
        day++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e01c      	b.n	80028b0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b1c      	cmp	r3, #28
 800287a:	d111      	bne.n	80028a0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f839 	bl	80028f8 <RTC_IsLeapYear>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <RTC_DateUpdate+0xf0>
        {
          day++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3301      	adds	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e00d      	b.n	80028b0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3301      	adds	r3, #1
 8002898:	613b      	str	r3, [r7, #16]
          day = 1U;
 800289a:	2301      	movs	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e007      	b.n	80028b0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b1d      	cmp	r3, #29
 80028a4:	d104      	bne.n	80028b0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3301      	adds	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d38b      	bcc.n	80027d6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	6978      	ldr	r0, [r7, #20]
 80028e2:	f000 f83b 	bl	800295c <RTC_WeekDayNum>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	731a      	strb	r2, [r3, #12]
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	e01d      	b.n	800294e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <RTC_IsLeapYear+0x60>)
 8002916:	fba2 1203 	umull	r1, r2, r2, r3
 800291a:	0952      	lsrs	r2, r2, #5
 800291c:	2164      	movs	r1, #100	; 0x64
 800291e:	fb01 f202 	mul.w	r2, r1, r2
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <RTC_IsLeapYear+0x60>)
 8002932:	fba2 1203 	umull	r1, r2, r2, r3
 8002936:	09d2      	lsrs	r2, r2, #7
 8002938:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800293c:	fb01 f202 	mul.w	r2, r1, r2
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800294c:	2300      	movs	r3, #0
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
 8002968:	4613      	mov	r3, r2
 800296a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800297a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d82d      	bhi.n	80029de <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <RTC_WeekDayNum+0xe4>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	085a      	lsrs	r2, r3, #1
 8002996:	78bb      	ldrb	r3, [r7, #2]
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	441a      	add	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	4926      	ldr	r1, [pc, #152]	; (8002a44 <RTC_WeekDayNum+0xe8>)
 80029ac:	fba1 1303 	umull	r1, r3, r1, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	1ad2      	subs	r2, r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4922      	ldr	r1, [pc, #136]	; (8002a44 <RTC_WeekDayNum+0xe8>)
 80029ba:	fba1 1303 	umull	r1, r3, r1, r3
 80029be:	09db      	lsrs	r3, r3, #7
 80029c0:	4413      	add	r3, r2
 80029c2:	1d1a      	adds	r2, r3, #4
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <RTC_WeekDayNum+0xec>)
 80029c6:	fba3 1302 	umull	r1, r3, r3, r2
 80029ca:	1ad1      	subs	r1, r2, r3
 80029cc:	0849      	lsrs	r1, r1, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	0899      	lsrs	r1, r3, #2
 80029d2:	460b      	mov	r3, r1
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	1a5b      	subs	r3, r3, r1
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e029      	b.n	8002a32 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <RTC_WeekDayNum+0xe4>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	085a      	lsrs	r2, r3, #1
 80029f2:	78bb      	ldrb	r3, [r7, #2]
 80029f4:	441a      	add	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	441a      	add	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4910      	ldr	r1, [pc, #64]	; (8002a44 <RTC_WeekDayNum+0xe8>)
 8002a04:	fba1 1303 	umull	r1, r3, r1, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <RTC_WeekDayNum+0xe8>)
 8002a10:	fba1 1303 	umull	r1, r3, r1, r3
 8002a14:	09db      	lsrs	r3, r3, #7
 8002a16:	4413      	add	r3, r2
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <RTC_WeekDayNum+0xec>)
 8002a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a20:	1ad1      	subs	r1, r2, r3
 8002a22:	0849      	lsrs	r1, r1, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	0899      	lsrs	r1, r3, #2
 8002a28:	460b      	mov	r3, r1
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a5b      	subs	r3, r3, r1
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	b2db      	uxtb	r3, r3
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	38e38e39 	.word	0x38e38e39
 8002a44:	51eb851f 	.word	0x51eb851f
 8002a48:	24924925 	.word	0x24924925

08002a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e03f      	b.n	8002ade <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fdca 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fd7f 	bl	8003594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08a      	sub	sp, #40	; 0x28
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d17c      	bne.n	8002c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Transmit+0x2c>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e075      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Transmit+0x3e>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e06e      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fd fedb 	bl	80008f4 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d108      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e003      	b.n	8002b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b78:	e02a      	b.n	8002bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 faf1 	bl	800316c <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e036      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	3302      	adds	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e007      	b.n	8002bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1cf      	bne.n	8002b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fac1 	bl	800316c <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d11d      	bne.n	8002c60 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_Receive_DMA+0x26>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e016      	b.n	8002c62 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Receive_DMA+0x38>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e00f      	b.n	8002c62 <HAL_UART_Receive_DMA+0x58>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fad2 	bl	8003200 <UART_Start_Receive_DMA>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x52>
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fbc2 	bl	8003440 <UART_Receive_IT>
      return;
 8002cbc:	e17b      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b1 	beq.w	8002e28 <HAL_UART_IRQHandler+0x1bc>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_UART_IRQHandler+0x70>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_UART_IRQHandler+0x90>
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_UART_IRQHandler+0xb0>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_UART_IRQHandler+0xd0>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00f      	beq.n	8002d66 <HAL_UART_IRQHandler+0xfa>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_UART_IRQHandler+0xee>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0208 	orr.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 811e 	beq.w	8002fac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_UART_IRQHandler+0x11e>
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb5b 	bl	8003440 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <HAL_UART_IRQHandler+0x146>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d031      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa9d 	bl	80032f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d023      	beq.n	8002e0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <HAL_UART_IRQHandler+0x350>)
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd ffb2 	bl	8000d54 <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00e      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8ec 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e00a      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8e8 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e006      	b.n	8002e24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8e4 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e22:	e0c3      	b.n	8002fac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	bf00      	nop
    return;
 8002e26:	e0c1      	b.n	8002fac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 80a1 	bne.w	8002f74 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 809b 	beq.w	8002f74 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8095 	beq.w	8002f74 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d04e      	beq.n	8002f0c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e78:	8a3b      	ldrh	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8098 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e84:	8a3a      	ldrh	r2, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f080 8092 	bcs.w	8002fb0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8a3a      	ldrh	r2, [r7, #16]
 8002e90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d02b      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eaa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0210 	bic.w	r2, r2, #16
 8002ee8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fef5 	bl	8000cde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f876 	bl	8002ff6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f0a:	e051      	b.n	8002fb0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d047      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f24:	8a7b      	ldrh	r3, [r7, #18]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0210 	bic.w	r2, r2, #16
 8002f66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f68:	8a7b      	ldrh	r3, [r7, #18]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f842 	bl	8002ff6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f72:	e01f      	b.n	8002fb4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_UART_IRQHandler+0x324>
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9f2 	bl	8003372 <UART_Transmit_IT>
    return;
 8002f8e:	e012      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa33 	bl	8003410 <UART_EndTransmit_IT>
    return;
 8002faa:	e004      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fb4:	bf00      	nop
  }
}
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800334b 	.word	0x0800334b

08002fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d12a      	bne.n	800307e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0210 	bic.w	r2, r2, #16
 800307c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b01      	cmp	r3, #1
 8003084:	d106      	bne.n	8003094 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308a:	4619      	mov	r1, r3
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff ffb2 	bl	8002ff6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003092:	e002      	b.n	800309a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7fd f88f 	bl	80001b8 <HAL_UART_RxCpltCallback>
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d108      	bne.n	80030ca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff97 	bl	8002ff6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030c8:	e002      	b.n	80030d0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff81 	bl	8002fd2 <HAL_UART_RxHalfCpltCallback>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b21      	cmp	r3, #33	; 0x21
 800310a:	d108      	bne.n	800311e <UART_DMAError+0x46>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003118:	68b8      	ldr	r0, [r7, #8]
 800311a:	f000 f8d5 	bl	80032c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b22      	cmp	r3, #34	; 0x22
 800313e:	d108      	bne.n	8003152 <UART_DMAError+0x7a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f000 f8d0 	bl	80032f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315e:	68b8      	ldr	r0, [r7, #8]
 8003160:	f7ff ff40 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317c:	e02c      	b.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d028      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <UART_WaitOnFlagUntilTimeout+0x30>
 800318c:	f7fd fbb2 	bl	80008f4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d21d      	bcs.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e00f      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d0c3      	beq.n	800317e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2222      	movs	r2, #34	; 0x22
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	4a23      	ldr	r2, [pc, #140]	; (80032bc <UART_Start_Receive_DMA+0xbc>)
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <UART_Start_Receive_DMA+0xc0>)
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <UART_Start_Receive_DMA+0xc4>)
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	2200      	movs	r2, #0
 8003246:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	f7fd fcde 	bl	8000c20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003290:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	0800300d 	.word	0x0800300d
 80032c0:	080030a3 	.word	0x080030a3
 80032c4:	080030d9 	.word	0x080030d9

080032c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80032de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003308:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0210 	bic.w	r2, r2, #16
 8003330:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fe3d 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b21      	cmp	r3, #33	; 0x21
 8003384:	d13e      	bne.n	8003404 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d114      	bne.n	80033ba <UART_Transmit_IT+0x48>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d110      	bne.n	80033ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]
 80033b8:	e008      	b.n	80033cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6211      	str	r1, [r2, #32]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4619      	mov	r1, r3
 80033da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003426:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fdc5 	bl	8002fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b22      	cmp	r3, #34	; 0x22
 8003452:	f040 8099 	bne.w	8003588 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	d117      	bne.n	8003490 <UART_Receive_IT+0x50>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	b29a      	uxth	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	1c9a      	adds	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
 800348e:	e026      	b.n	80034de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d007      	beq.n	80034b4 <UART_Receive_IT+0x74>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <UART_Receive_IT+0x82>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e008      	b.n	80034d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4619      	mov	r1, r3
 80034ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d148      	bne.n	8003584 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0220 	bic.w	r2, r2, #32
 8003500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	2b01      	cmp	r3, #1
 8003530:	d123      	bne.n	800357a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d10a      	bne.n	800356c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fd3f 	bl	8002ff6 <HAL_UARTEx_RxEventCallback>
 8003578:	e002      	b.n	8003580 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fc fe1c 	bl	80001b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e002      	b.n	800358a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035ce:	f023 030c 	bic.w	r3, r3, #12
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	430b      	orrs	r3, r1
 80035da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <UART_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe facc 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	e002      	b.n	800360a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fab4 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8003608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <UART_SetConfig+0x118>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	0119      	lsls	r1, r3, #4
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <UART_SetConfig+0x118>)
 8003642:	fba3 0302 	umull	r0, r3, r3, r2
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2064      	movs	r0, #100	; 0x64
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	3332      	adds	r3, #50	; 0x32
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <UART_SetConfig+0x118>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003660:	4419      	add	r1, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fbb2 f2f3 	udiv	r2, r2, r3
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <UART_SetConfig+0x118>)
 800367a:	fba3 0302 	umull	r0, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	fb00 f303 	mul.w	r3, r0, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <UART_SetConfig+0x118>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	440a      	add	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	51eb851f 	.word	0x51eb851f

080036b0 <__errno>:
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <__errno+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000000c 	.word	0x2000000c

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	2600      	movs	r6, #0
 80036c0:	4d0c      	ldr	r5, [pc, #48]	; (80036f4 <__libc_init_array+0x38>)
 80036c2:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	42a6      	cmp	r6, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	f000 fc9c 	bl	8004008 <_init>
 80036d0:	2600      	movs	r6, #0
 80036d2:	4d0a      	ldr	r5, [pc, #40]	; (80036fc <__libc_init_array+0x40>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	; (8003700 <__libc_init_array+0x44>)
 80036d6:	1b64      	subs	r4, r4, r5
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	42a6      	cmp	r6, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e4:	4798      	blx	r3
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ee:	4798      	blx	r3
 80036f0:	3601      	adds	r6, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	080040e4 	.word	0x080040e4
 80036f8:	080040e4 	.word	0x080040e4
 80036fc:	080040e4 	.word	0x080040e4
 8003700:	080040e8 	.word	0x080040e8

08003704 <memset>:
 8003704:	4603      	mov	r3, r0
 8003706:	4402      	add	r2, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <siprintf>:
 8003714:	b40e      	push	{r1, r2, r3}
 8003716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800371a:	b500      	push	{lr}
 800371c:	b09c      	sub	sp, #112	; 0x70
 800371e:	ab1d      	add	r3, sp, #116	; 0x74
 8003720:	9002      	str	r0, [sp, #8]
 8003722:	9006      	str	r0, [sp, #24]
 8003724:	9107      	str	r1, [sp, #28]
 8003726:	9104      	str	r1, [sp, #16]
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <siprintf+0x38>)
 800372a:	4909      	ldr	r1, [pc, #36]	; (8003750 <siprintf+0x3c>)
 800372c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003730:	9105      	str	r1, [sp, #20]
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	a902      	add	r1, sp, #8
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f000 f868 	bl	800380c <_svfiprintf_r>
 800373c:	2200      	movs	r2, #0
 800373e:	9b02      	ldr	r3, [sp, #8]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	b01c      	add	sp, #112	; 0x70
 8003744:	f85d eb04 	ldr.w	lr, [sp], #4
 8003748:	b003      	add	sp, #12
 800374a:	4770      	bx	lr
 800374c:	2000000c 	.word	0x2000000c
 8003750:	ffff0208 	.word	0xffff0208

08003754 <__ssputs_r>:
 8003754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	688e      	ldr	r6, [r1, #8]
 800375a:	4682      	mov	sl, r0
 800375c:	429e      	cmp	r6, r3
 800375e:	460c      	mov	r4, r1
 8003760:	4690      	mov	r8, r2
 8003762:	461f      	mov	r7, r3
 8003764:	d838      	bhi.n	80037d8 <__ssputs_r+0x84>
 8003766:	898a      	ldrh	r2, [r1, #12]
 8003768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800376c:	d032      	beq.n	80037d4 <__ssputs_r+0x80>
 800376e:	6825      	ldr	r5, [r4, #0]
 8003770:	6909      	ldr	r1, [r1, #16]
 8003772:	3301      	adds	r3, #1
 8003774:	eba5 0901 	sub.w	r9, r5, r1
 8003778:	6965      	ldr	r5, [r4, #20]
 800377a:	444b      	add	r3, r9
 800377c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003784:	106d      	asrs	r5, r5, #1
 8003786:	429d      	cmp	r5, r3
 8003788:	bf38      	it	cc
 800378a:	461d      	movcc	r5, r3
 800378c:	0553      	lsls	r3, r2, #21
 800378e:	d531      	bpl.n	80037f4 <__ssputs_r+0xa0>
 8003790:	4629      	mov	r1, r5
 8003792:	f000 fb6f 	bl	8003e74 <_malloc_r>
 8003796:	4606      	mov	r6, r0
 8003798:	b950      	cbnz	r0, 80037b0 <__ssputs_r+0x5c>
 800379a:	230c      	movs	r3, #12
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f8ca 3000 	str.w	r3, [sl]
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	464a      	mov	r2, r9
 80037b2:	6921      	ldr	r1, [r4, #16]
 80037b4:	f000 face 	bl	8003d54 <memcpy>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	6126      	str	r6, [r4, #16]
 80037c6:	444e      	add	r6, r9
 80037c8:	6026      	str	r6, [r4, #0]
 80037ca:	463e      	mov	r6, r7
 80037cc:	6165      	str	r5, [r4, #20]
 80037ce:	eba5 0509 	sub.w	r5, r5, r9
 80037d2:	60a5      	str	r5, [r4, #8]
 80037d4:	42be      	cmp	r6, r7
 80037d6:	d900      	bls.n	80037da <__ssputs_r+0x86>
 80037d8:	463e      	mov	r6, r7
 80037da:	4632      	mov	r2, r6
 80037dc:	4641      	mov	r1, r8
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f000 fac6 	bl	8003d70 <memmove>
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	2000      	movs	r0, #0
 80037e8:	1b9b      	subs	r3, r3, r6
 80037ea:	60a3      	str	r3, [r4, #8]
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	4433      	add	r3, r6
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	e7db      	b.n	80037ac <__ssputs_r+0x58>
 80037f4:	462a      	mov	r2, r5
 80037f6:	f000 fbb1 	bl	8003f5c <_realloc_r>
 80037fa:	4606      	mov	r6, r0
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d1e1      	bne.n	80037c4 <__ssputs_r+0x70>
 8003800:	4650      	mov	r0, sl
 8003802:	6921      	ldr	r1, [r4, #16]
 8003804:	f000 face 	bl	8003da4 <_free_r>
 8003808:	e7c7      	b.n	800379a <__ssputs_r+0x46>
	...

0800380c <_svfiprintf_r>:
 800380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	4698      	mov	r8, r3
 8003812:	898b      	ldrh	r3, [r1, #12]
 8003814:	4607      	mov	r7, r0
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	460d      	mov	r5, r1
 800381a:	4614      	mov	r4, r2
 800381c:	b09d      	sub	sp, #116	; 0x74
 800381e:	d50e      	bpl.n	800383e <_svfiprintf_r+0x32>
 8003820:	690b      	ldr	r3, [r1, #16]
 8003822:	b963      	cbnz	r3, 800383e <_svfiprintf_r+0x32>
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	f000 fb25 	bl	8003e74 <_malloc_r>
 800382a:	6028      	str	r0, [r5, #0]
 800382c:	6128      	str	r0, [r5, #16]
 800382e:	b920      	cbnz	r0, 800383a <_svfiprintf_r+0x2e>
 8003830:	230c      	movs	r3, #12
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	e0d1      	b.n	80039de <_svfiprintf_r+0x1d2>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	616b      	str	r3, [r5, #20]
 800383e:	2300      	movs	r3, #0
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	2320      	movs	r3, #32
 8003844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003848:	2330      	movs	r3, #48	; 0x30
 800384a:	f04f 0901 	mov.w	r9, #1
 800384e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003852:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039f8 <_svfiprintf_r+0x1ec>
 8003856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800385a:	4623      	mov	r3, r4
 800385c:	469a      	mov	sl, r3
 800385e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003862:	b10a      	cbz	r2, 8003868 <_svfiprintf_r+0x5c>
 8003864:	2a25      	cmp	r2, #37	; 0x25
 8003866:	d1f9      	bne.n	800385c <_svfiprintf_r+0x50>
 8003868:	ebba 0b04 	subs.w	fp, sl, r4
 800386c:	d00b      	beq.n	8003886 <_svfiprintf_r+0x7a>
 800386e:	465b      	mov	r3, fp
 8003870:	4622      	mov	r2, r4
 8003872:	4629      	mov	r1, r5
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff6d 	bl	8003754 <__ssputs_r>
 800387a:	3001      	adds	r0, #1
 800387c:	f000 80aa 	beq.w	80039d4 <_svfiprintf_r+0x1c8>
 8003880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003882:	445a      	add	r2, fp
 8003884:	9209      	str	r2, [sp, #36]	; 0x24
 8003886:	f89a 3000 	ldrb.w	r3, [sl]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a2 	beq.w	80039d4 <_svfiprintf_r+0x1c8>
 8003890:	2300      	movs	r3, #0
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800389a:	f10a 0a01 	add.w	sl, sl, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	9307      	str	r3, [sp, #28]
 80038a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a6:	931a      	str	r3, [sp, #104]	; 0x68
 80038a8:	4654      	mov	r4, sl
 80038aa:	2205      	movs	r2, #5
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	4851      	ldr	r0, [pc, #324]	; (80039f8 <_svfiprintf_r+0x1ec>)
 80038b2:	f000 fa41 	bl	8003d38 <memchr>
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	b9d8      	cbnz	r0, 80038f2 <_svfiprintf_r+0xe6>
 80038ba:	06d0      	lsls	r0, r2, #27
 80038bc:	bf44      	itt	mi
 80038be:	2320      	movmi	r3, #32
 80038c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c4:	0711      	lsls	r1, r2, #28
 80038c6:	bf44      	itt	mi
 80038c8:	232b      	movmi	r3, #43	; 0x2b
 80038ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ce:	f89a 3000 	ldrb.w	r3, [sl]
 80038d2:	2b2a      	cmp	r3, #42	; 0x2a
 80038d4:	d015      	beq.n	8003902 <_svfiprintf_r+0xf6>
 80038d6:	4654      	mov	r4, sl
 80038d8:	2000      	movs	r0, #0
 80038da:	f04f 0c0a 	mov.w	ip, #10
 80038de:	9a07      	ldr	r2, [sp, #28]
 80038e0:	4621      	mov	r1, r4
 80038e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e6:	3b30      	subs	r3, #48	; 0x30
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d94e      	bls.n	800398a <_svfiprintf_r+0x17e>
 80038ec:	b1b0      	cbz	r0, 800391c <_svfiprintf_r+0x110>
 80038ee:	9207      	str	r2, [sp, #28]
 80038f0:	e014      	b.n	800391c <_svfiprintf_r+0x110>
 80038f2:	eba0 0308 	sub.w	r3, r0, r8
 80038f6:	fa09 f303 	lsl.w	r3, r9, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	46a2      	mov	sl, r4
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	e7d2      	b.n	80038a8 <_svfiprintf_r+0x9c>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	9103      	str	r1, [sp, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfbb      	ittet	lt
 800390e:	425b      	neglt	r3, r3
 8003910:	f042 0202 	orrlt.w	r2, r2, #2
 8003914:	9307      	strge	r3, [sp, #28]
 8003916:	9307      	strlt	r3, [sp, #28]
 8003918:	bfb8      	it	lt
 800391a:	9204      	strlt	r2, [sp, #16]
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	2b2e      	cmp	r3, #46	; 0x2e
 8003920:	d10c      	bne.n	800393c <_svfiprintf_r+0x130>
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	2b2a      	cmp	r3, #42	; 0x2a
 8003926:	d135      	bne.n	8003994 <_svfiprintf_r+0x188>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	3402      	adds	r4, #2
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	f04f 33ff 	movlt.w	r3, #4294967295
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80039fc <_svfiprintf_r+0x1f0>
 8003940:	2203      	movs	r2, #3
 8003942:	4650      	mov	r0, sl
 8003944:	7821      	ldrb	r1, [r4, #0]
 8003946:	f000 f9f7 	bl	8003d38 <memchr>
 800394a:	b140      	cbz	r0, 800395e <_svfiprintf_r+0x152>
 800394c:	2340      	movs	r3, #64	; 0x40
 800394e:	eba0 000a 	sub.w	r0, r0, sl
 8003952:	fa03 f000 	lsl.w	r0, r3, r0
 8003956:	9b04      	ldr	r3, [sp, #16]
 8003958:	3401      	adds	r4, #1
 800395a:	4303      	orrs	r3, r0
 800395c:	9304      	str	r3, [sp, #16]
 800395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003962:	2206      	movs	r2, #6
 8003964:	4826      	ldr	r0, [pc, #152]	; (8003a00 <_svfiprintf_r+0x1f4>)
 8003966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800396a:	f000 f9e5 	bl	8003d38 <memchr>
 800396e:	2800      	cmp	r0, #0
 8003970:	d038      	beq.n	80039e4 <_svfiprintf_r+0x1d8>
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <_svfiprintf_r+0x1f8>)
 8003974:	bb1b      	cbnz	r3, 80039be <_svfiprintf_r+0x1b2>
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	3307      	adds	r3, #7
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	3308      	adds	r3, #8
 8003980:	9303      	str	r3, [sp, #12]
 8003982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003984:	4433      	add	r3, r6
 8003986:	9309      	str	r3, [sp, #36]	; 0x24
 8003988:	e767      	b.n	800385a <_svfiprintf_r+0x4e>
 800398a:	460c      	mov	r4, r1
 800398c:	2001      	movs	r0, #1
 800398e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003992:	e7a5      	b.n	80038e0 <_svfiprintf_r+0xd4>
 8003994:	2300      	movs	r3, #0
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	4619      	mov	r1, r3
 800399c:	3401      	adds	r4, #1
 800399e:	9305      	str	r3, [sp, #20]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a6:	3a30      	subs	r2, #48	; 0x30
 80039a8:	2a09      	cmp	r2, #9
 80039aa:	d903      	bls.n	80039b4 <_svfiprintf_r+0x1a8>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0c5      	beq.n	800393c <_svfiprintf_r+0x130>
 80039b0:	9105      	str	r1, [sp, #20]
 80039b2:	e7c3      	b.n	800393c <_svfiprintf_r+0x130>
 80039b4:	4604      	mov	r4, r0
 80039b6:	2301      	movs	r3, #1
 80039b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80039bc:	e7f0      	b.n	80039a0 <_svfiprintf_r+0x194>
 80039be:	ab03      	add	r3, sp, #12
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	462a      	mov	r2, r5
 80039c4:	4638      	mov	r0, r7
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <_svfiprintf_r+0x1fc>)
 80039c8:	a904      	add	r1, sp, #16
 80039ca:	f3af 8000 	nop.w
 80039ce:	1c42      	adds	r2, r0, #1
 80039d0:	4606      	mov	r6, r0
 80039d2:	d1d6      	bne.n	8003982 <_svfiprintf_r+0x176>
 80039d4:	89ab      	ldrh	r3, [r5, #12]
 80039d6:	065b      	lsls	r3, r3, #25
 80039d8:	f53f af2c 	bmi.w	8003834 <_svfiprintf_r+0x28>
 80039dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039de:	b01d      	add	sp, #116	; 0x74
 80039e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e4:	ab03      	add	r3, sp, #12
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	462a      	mov	r2, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <_svfiprintf_r+0x1fc>)
 80039ee:	a904      	add	r1, sp, #16
 80039f0:	f000 f87c 	bl	8003aec <_printf_i>
 80039f4:	e7eb      	b.n	80039ce <_svfiprintf_r+0x1c2>
 80039f6:	bf00      	nop
 80039f8:	080040b0 	.word	0x080040b0
 80039fc:	080040b6 	.word	0x080040b6
 8003a00:	080040ba 	.word	0x080040ba
 8003a04:	00000000 	.word	0x00000000
 8003a08:	08003755 	.word	0x08003755

08003a0c <_printf_common>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4616      	mov	r6, r2
 8003a12:	4699      	mov	r9, r3
 8003a14:	688a      	ldr	r2, [r1, #8]
 8003a16:	690b      	ldr	r3, [r1, #16]
 8003a18:	4607      	mov	r7, r0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfb8      	it	lt
 8003a1e:	4613      	movlt	r3, r2
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a26:	460c      	mov	r4, r1
 8003a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a2c:	b10a      	cbz	r2, 8003a32 <_printf_common+0x26>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	0699      	lsls	r1, r3, #26
 8003a36:	bf42      	ittt	mi
 8003a38:	6833      	ldrmi	r3, [r6, #0]
 8003a3a:	3302      	addmi	r3, #2
 8003a3c:	6033      	strmi	r3, [r6, #0]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d106      	bne.n	8003a54 <_printf_common+0x48>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	6832      	ldr	r2, [r6, #0]
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc28      	bgt.n	8003aa6 <_printf_common+0x9a>
 8003a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a58:	1e13      	subs	r3, r2, #0
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d42d      	bmi.n	8003ac0 <_printf_common+0xb4>
 8003a64:	4649      	mov	r1, r9
 8003a66:	4638      	mov	r0, r7
 8003a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a6c:	47c0      	blx	r8
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d020      	beq.n	8003ab4 <_printf_common+0xa8>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	68e5      	ldr	r5, [r4, #12]
 8003a76:	f003 0306 	and.w	r3, r3, #6
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf18      	it	ne
 8003a7e:	2500      	movne	r5, #0
 8003a80:	6832      	ldr	r2, [r6, #0]
 8003a82:	f04f 0600 	mov.w	r6, #0
 8003a86:	68a3      	ldr	r3, [r4, #8]
 8003a88:	bf08      	it	eq
 8003a8a:	1aad      	subeq	r5, r5, r2
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	bf08      	it	eq
 8003a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bfc4      	itt	gt
 8003a98:	1a9b      	subgt	r3, r3, r2
 8003a9a:	18ed      	addgt	r5, r5, r3
 8003a9c:	341a      	adds	r4, #26
 8003a9e:	42b5      	cmp	r5, r6
 8003aa0:	d11a      	bne.n	8003ad8 <_printf_common+0xcc>
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e008      	b.n	8003ab8 <_printf_common+0xac>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4652      	mov	r2, sl
 8003aaa:	4649      	mov	r1, r9
 8003aac:	4638      	mov	r0, r7
 8003aae:	47c0      	blx	r8
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d103      	bne.n	8003abc <_printf_common+0xb0>
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	3501      	adds	r5, #1
 8003abe:	e7c4      	b.n	8003a4a <_printf_common+0x3e>
 8003ac0:	2030      	movs	r0, #48	; 0x30
 8003ac2:	18e1      	adds	r1, r4, r3
 8003ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ace:	4422      	add	r2, r4
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad6:	e7c5      	b.n	8003a64 <_printf_common+0x58>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4622      	mov	r2, r4
 8003adc:	4649      	mov	r1, r9
 8003ade:	4638      	mov	r0, r7
 8003ae0:	47c0      	blx	r8
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d0e6      	beq.n	8003ab4 <_printf_common+0xa8>
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7d9      	b.n	8003a9e <_printf_common+0x92>
	...

08003aec <_printf_i>:
 8003aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	7e0f      	ldrb	r7, [r1, #24]
 8003af2:	4691      	mov	r9, r2
 8003af4:	2f78      	cmp	r7, #120	; 0x78
 8003af6:	4680      	mov	r8, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	469a      	mov	sl, r3
 8003afc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b02:	d807      	bhi.n	8003b14 <_printf_i+0x28>
 8003b04:	2f62      	cmp	r7, #98	; 0x62
 8003b06:	d80a      	bhi.n	8003b1e <_printf_i+0x32>
 8003b08:	2f00      	cmp	r7, #0
 8003b0a:	f000 80d9 	beq.w	8003cc0 <_printf_i+0x1d4>
 8003b0e:	2f58      	cmp	r7, #88	; 0x58
 8003b10:	f000 80a4 	beq.w	8003c5c <_printf_i+0x170>
 8003b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b1c:	e03a      	b.n	8003b94 <_printf_i+0xa8>
 8003b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b22:	2b15      	cmp	r3, #21
 8003b24:	d8f6      	bhi.n	8003b14 <_printf_i+0x28>
 8003b26:	a101      	add	r1, pc, #4	; (adr r1, 8003b2c <_printf_i+0x40>)
 8003b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b2c:	08003b85 	.word	0x08003b85
 8003b30:	08003b99 	.word	0x08003b99
 8003b34:	08003b15 	.word	0x08003b15
 8003b38:	08003b15 	.word	0x08003b15
 8003b3c:	08003b15 	.word	0x08003b15
 8003b40:	08003b15 	.word	0x08003b15
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003b15 	.word	0x08003b15
 8003b4c:	08003b15 	.word	0x08003b15
 8003b50:	08003b15 	.word	0x08003b15
 8003b54:	08003b15 	.word	0x08003b15
 8003b58:	08003ca7 	.word	0x08003ca7
 8003b5c:	08003bc9 	.word	0x08003bc9
 8003b60:	08003c89 	.word	0x08003c89
 8003b64:	08003b15 	.word	0x08003b15
 8003b68:	08003b15 	.word	0x08003b15
 8003b6c:	08003cc9 	.word	0x08003cc9
 8003b70:	08003b15 	.word	0x08003b15
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003b15 	.word	0x08003b15
 8003b7c:	08003b15 	.word	0x08003b15
 8003b80:	08003c91 	.word	0x08003c91
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	602a      	str	r2, [r5, #0]
 8003b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0a4      	b.n	8003ce2 <_printf_i+0x1f6>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	6829      	ldr	r1, [r5, #0]
 8003b9c:	0606      	lsls	r6, r0, #24
 8003b9e:	f101 0304 	add.w	r3, r1, #4
 8003ba2:	d50a      	bpl.n	8003bba <_printf_i+0xce>
 8003ba4:	680e      	ldr	r6, [r1, #0]
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	da03      	bge.n	8003bb4 <_printf_i+0xc8>
 8003bac:	232d      	movs	r3, #45	; 0x2d
 8003bae:	4276      	negs	r6, r6
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	485e      	ldr	r0, [pc, #376]	; (8003d30 <_printf_i+0x244>)
 8003bb8:	e019      	b.n	8003bee <_printf_i+0x102>
 8003bba:	680e      	ldr	r6, [r1, #0]
 8003bbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bc0:	602b      	str	r3, [r5, #0]
 8003bc2:	bf18      	it	ne
 8003bc4:	b236      	sxthne	r6, r6
 8003bc6:	e7ef      	b.n	8003ba8 <_printf_i+0xbc>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	1d19      	adds	r1, r3, #4
 8003bce:	6029      	str	r1, [r5, #0]
 8003bd0:	0601      	lsls	r1, r0, #24
 8003bd2:	d501      	bpl.n	8003bd8 <_printf_i+0xec>
 8003bd4:	681e      	ldr	r6, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <_printf_i+0xf2>
 8003bd8:	0646      	lsls	r6, r0, #25
 8003bda:	d5fb      	bpl.n	8003bd4 <_printf_i+0xe8>
 8003bdc:	881e      	ldrh	r6, [r3, #0]
 8003bde:	2f6f      	cmp	r7, #111	; 0x6f
 8003be0:	bf0c      	ite	eq
 8003be2:	2308      	moveq	r3, #8
 8003be4:	230a      	movne	r3, #10
 8003be6:	4852      	ldr	r0, [pc, #328]	; (8003d30 <_printf_i+0x244>)
 8003be8:	2100      	movs	r1, #0
 8003bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bee:	6865      	ldr	r5, [r4, #4]
 8003bf0:	2d00      	cmp	r5, #0
 8003bf2:	bfa8      	it	ge
 8003bf4:	6821      	ldrge	r1, [r4, #0]
 8003bf6:	60a5      	str	r5, [r4, #8]
 8003bf8:	bfa4      	itt	ge
 8003bfa:	f021 0104 	bicge.w	r1, r1, #4
 8003bfe:	6021      	strge	r1, [r4, #0]
 8003c00:	b90e      	cbnz	r6, 8003c06 <_printf_i+0x11a>
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	d04d      	beq.n	8003ca2 <_printf_i+0x1b6>
 8003c06:	4615      	mov	r5, r2
 8003c08:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c0c:	fb03 6711 	mls	r7, r3, r1, r6
 8003c10:	5dc7      	ldrb	r7, [r0, r7]
 8003c12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c16:	4637      	mov	r7, r6
 8003c18:	42bb      	cmp	r3, r7
 8003c1a:	460e      	mov	r6, r1
 8003c1c:	d9f4      	bls.n	8003c08 <_printf_i+0x11c>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d10b      	bne.n	8003c3a <_printf_i+0x14e>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	07de      	lsls	r6, r3, #31
 8003c26:	d508      	bpl.n	8003c3a <_printf_i+0x14e>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	6861      	ldr	r1, [r4, #4]
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	bfde      	ittt	le
 8003c30:	2330      	movle	r3, #48	; 0x30
 8003c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c3a:	1b52      	subs	r2, r2, r5
 8003c3c:	6122      	str	r2, [r4, #16]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f8cd a000 	str.w	sl, [sp]
 8003c48:	aa03      	add	r2, sp, #12
 8003c4a:	f7ff fedf 	bl	8003a0c <_printf_common>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d14c      	bne.n	8003cec <_printf_i+0x200>
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295
 8003c56:	b004      	add	sp, #16
 8003c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5c:	4834      	ldr	r0, [pc, #208]	; (8003d30 <_printf_i+0x244>)
 8003c5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c62:	6829      	ldr	r1, [r5, #0]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c6a:	6029      	str	r1, [r5, #0]
 8003c6c:	061d      	lsls	r5, r3, #24
 8003c6e:	d514      	bpl.n	8003c9a <_printf_i+0x1ae>
 8003c70:	07df      	lsls	r7, r3, #31
 8003c72:	bf44      	itt	mi
 8003c74:	f043 0320 	orrmi.w	r3, r3, #32
 8003c78:	6023      	strmi	r3, [r4, #0]
 8003c7a:	b91e      	cbnz	r6, 8003c84 <_printf_i+0x198>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f023 0320 	bic.w	r3, r3, #32
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	2310      	movs	r3, #16
 8003c86:	e7af      	b.n	8003be8 <_printf_i+0xfc>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	f043 0320 	orr.w	r3, r3, #32
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	2378      	movs	r3, #120	; 0x78
 8003c92:	4828      	ldr	r0, [pc, #160]	; (8003d34 <_printf_i+0x248>)
 8003c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c98:	e7e3      	b.n	8003c62 <_printf_i+0x176>
 8003c9a:	0659      	lsls	r1, r3, #25
 8003c9c:	bf48      	it	mi
 8003c9e:	b2b6      	uxthmi	r6, r6
 8003ca0:	e7e6      	b.n	8003c70 <_printf_i+0x184>
 8003ca2:	4615      	mov	r5, r2
 8003ca4:	e7bb      	b.n	8003c1e <_printf_i+0x132>
 8003ca6:	682b      	ldr	r3, [r5, #0]
 8003ca8:	6826      	ldr	r6, [r4, #0]
 8003caa:	1d18      	adds	r0, r3, #4
 8003cac:	6961      	ldr	r1, [r4, #20]
 8003cae:	6028      	str	r0, [r5, #0]
 8003cb0:	0635      	lsls	r5, r6, #24
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	d501      	bpl.n	8003cba <_printf_i+0x1ce>
 8003cb6:	6019      	str	r1, [r3, #0]
 8003cb8:	e002      	b.n	8003cc0 <_printf_i+0x1d4>
 8003cba:	0670      	lsls	r0, r6, #25
 8003cbc:	d5fb      	bpl.n	8003cb6 <_printf_i+0x1ca>
 8003cbe:	8019      	strh	r1, [r3, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4615      	mov	r5, r2
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	e7ba      	b.n	8003c3e <_printf_i+0x152>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	1d1a      	adds	r2, r3, #4
 8003cce:	602a      	str	r2, [r5, #0]
 8003cd0:	681d      	ldr	r5, [r3, #0]
 8003cd2:	6862      	ldr	r2, [r4, #4]
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 f82f 	bl	8003d38 <memchr>
 8003cda:	b108      	cbz	r0, 8003ce0 <_printf_i+0x1f4>
 8003cdc:	1b40      	subs	r0, r0, r5
 8003cde:	6060      	str	r0, [r4, #4]
 8003ce0:	6863      	ldr	r3, [r4, #4]
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cea:	e7a8      	b.n	8003c3e <_printf_i+0x152>
 8003cec:	462a      	mov	r2, r5
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	47d0      	blx	sl
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d0ab      	beq.n	8003c52 <_printf_i+0x166>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	079b      	lsls	r3, r3, #30
 8003cfe:	d413      	bmi.n	8003d28 <_printf_i+0x23c>
 8003d00:	68e0      	ldr	r0, [r4, #12]
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	4298      	cmp	r0, r3
 8003d06:	bfb8      	it	lt
 8003d08:	4618      	movlt	r0, r3
 8003d0a:	e7a4      	b.n	8003c56 <_printf_i+0x16a>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4632      	mov	r2, r6
 8003d10:	4649      	mov	r1, r9
 8003d12:	4640      	mov	r0, r8
 8003d14:	47d0      	blx	sl
 8003d16:	3001      	adds	r0, #1
 8003d18:	d09b      	beq.n	8003c52 <_printf_i+0x166>
 8003d1a:	3501      	adds	r5, #1
 8003d1c:	68e3      	ldr	r3, [r4, #12]
 8003d1e:	9903      	ldr	r1, [sp, #12]
 8003d20:	1a5b      	subs	r3, r3, r1
 8003d22:	42ab      	cmp	r3, r5
 8003d24:	dcf2      	bgt.n	8003d0c <_printf_i+0x220>
 8003d26:	e7eb      	b.n	8003d00 <_printf_i+0x214>
 8003d28:	2500      	movs	r5, #0
 8003d2a:	f104 0619 	add.w	r6, r4, #25
 8003d2e:	e7f5      	b.n	8003d1c <_printf_i+0x230>
 8003d30:	080040c1 	.word	0x080040c1
 8003d34:	080040d2 	.word	0x080040d2

08003d38 <memchr>:
 8003d38:	4603      	mov	r3, r0
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	b2c9      	uxtb	r1, r1
 8003d3e:	4402      	add	r2, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	d101      	bne.n	8003d4a <memchr+0x12>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e003      	b.n	8003d52 <memchr+0x1a>
 8003d4a:	7804      	ldrb	r4, [r0, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	428c      	cmp	r4, r1
 8003d50:	d1f6      	bne.n	8003d40 <memchr+0x8>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memcpy>:
 8003d54:	440a      	add	r2, r1
 8003d56:	4291      	cmp	r1, r2
 8003d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d5c:	d100      	bne.n	8003d60 <memcpy+0xc>
 8003d5e:	4770      	bx	lr
 8003d60:	b510      	push	{r4, lr}
 8003d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d66:	4291      	cmp	r1, r2
 8003d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d6c:	d1f9      	bne.n	8003d62 <memcpy+0xe>
 8003d6e:	bd10      	pop	{r4, pc}

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0402 	add.w	r4, r1, r2
 8003d78:	d902      	bls.n	8003d80 <memmove+0x10>
 8003d7a:	4284      	cmp	r4, r0
 8003d7c:	4623      	mov	r3, r4
 8003d7e:	d807      	bhi.n	8003d90 <memmove+0x20>
 8003d80:	1e43      	subs	r3, r0, #1
 8003d82:	42a1      	cmp	r1, r4
 8003d84:	d008      	beq.n	8003d98 <memmove+0x28>
 8003d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d8e:	e7f8      	b.n	8003d82 <memmove+0x12>
 8003d90:	4601      	mov	r1, r0
 8003d92:	4402      	add	r2, r0
 8003d94:	428a      	cmp	r2, r1
 8003d96:	d100      	bne.n	8003d9a <memmove+0x2a>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da2:	e7f7      	b.n	8003d94 <memmove+0x24>

08003da4 <_free_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4605      	mov	r5, r0
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d040      	beq.n	8003e2e <_free_r+0x8a>
 8003dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db0:	1f0c      	subs	r4, r1, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	18e4      	addlt	r4, r4, r3
 8003db8:	f000 f910 	bl	8003fdc <__malloc_lock>
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <_free_r+0x8c>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	b933      	cbnz	r3, 8003dd0 <_free_r+0x2c>
 8003dc2:	6063      	str	r3, [r4, #4]
 8003dc4:	6014      	str	r4, [r2, #0]
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dcc:	f000 b90c 	b.w	8003fe8 <__malloc_unlock>
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d908      	bls.n	8003de6 <_free_r+0x42>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf01      	itttt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	e7ed      	b.n	8003dc2 <_free_r+0x1e>
 8003de6:	461a      	mov	r2, r3
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b10b      	cbz	r3, 8003df0 <_free_r+0x4c>
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d9fa      	bls.n	8003de6 <_free_r+0x42>
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	1850      	adds	r0, r2, r1
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d10b      	bne.n	8003e10 <_free_r+0x6c>
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	4401      	add	r1, r0
 8003dfc:	1850      	adds	r0, r2, r1
 8003dfe:	4283      	cmp	r3, r0
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	d1e0      	bne.n	8003dc6 <_free_r+0x22>
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4401      	add	r1, r0
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	6053      	str	r3, [r2, #4]
 8003e0e:	e7da      	b.n	8003dc6 <_free_r+0x22>
 8003e10:	d902      	bls.n	8003e18 <_free_r+0x74>
 8003e12:	230c      	movs	r3, #12
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	e7d6      	b.n	8003dc6 <_free_r+0x22>
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	1821      	adds	r1, r4, r0
 8003e1c:	428b      	cmp	r3, r1
 8003e1e:	bf01      	itttt	eq
 8003e20:	6819      	ldreq	r1, [r3, #0]
 8003e22:	685b      	ldreq	r3, [r3, #4]
 8003e24:	1809      	addeq	r1, r1, r0
 8003e26:	6021      	streq	r1, [r4, #0]
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	6054      	str	r4, [r2, #4]
 8003e2c:	e7cb      	b.n	8003dc6 <_free_r+0x22>
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	200001a4 	.word	0x200001a4

08003e34 <sbrk_aligned>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4e0e      	ldr	r6, [pc, #56]	; (8003e70 <sbrk_aligned+0x3c>)
 8003e38:	460c      	mov	r4, r1
 8003e3a:	6831      	ldr	r1, [r6, #0]
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	b911      	cbnz	r1, 8003e46 <sbrk_aligned+0x12>
 8003e40:	f000 f8bc 	bl	8003fbc <_sbrk_r>
 8003e44:	6030      	str	r0, [r6, #0]
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 f8b7 	bl	8003fbc <_sbrk_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <sbrk_aligned+0x34>
 8003e52:	1cc4      	adds	r4, r0, #3
 8003e54:	f024 0403 	bic.w	r4, r4, #3
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d007      	beq.n	8003e6c <sbrk_aligned+0x38>
 8003e5c:	1a21      	subs	r1, r4, r0
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 f8ac 	bl	8003fbc <_sbrk_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d101      	bne.n	8003e6c <sbrk_aligned+0x38>
 8003e68:	f04f 34ff 	mov.w	r4, #4294967295
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	200001a8 	.word	0x200001a8

08003e74 <_malloc_r>:
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e78:	1ccd      	adds	r5, r1, #3
 8003e7a:	f025 0503 	bic.w	r5, r5, #3
 8003e7e:	3508      	adds	r5, #8
 8003e80:	2d0c      	cmp	r5, #12
 8003e82:	bf38      	it	cc
 8003e84:	250c      	movcc	r5, #12
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	4607      	mov	r7, r0
 8003e8a:	db01      	blt.n	8003e90 <_malloc_r+0x1c>
 8003e8c:	42a9      	cmp	r1, r5
 8003e8e:	d905      	bls.n	8003e9c <_malloc_r+0x28>
 8003e90:	230c      	movs	r3, #12
 8003e92:	2600      	movs	r6, #0
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4630      	mov	r0, r6
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	4e2e      	ldr	r6, [pc, #184]	; (8003f58 <_malloc_r+0xe4>)
 8003e9e:	f000 f89d 	bl	8003fdc <__malloc_lock>
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	461c      	mov	r4, r3
 8003ea6:	bb34      	cbnz	r4, 8003ef6 <_malloc_r+0x82>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f7ff ffc2 	bl	8003e34 <sbrk_aligned>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	d14d      	bne.n	8003f52 <_malloc_r+0xde>
 8003eb6:	6834      	ldr	r4, [r6, #0]
 8003eb8:	4626      	mov	r6, r4
 8003eba:	2e00      	cmp	r6, #0
 8003ebc:	d140      	bne.n	8003f40 <_malloc_r+0xcc>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	eb04 0803 	add.w	r8, r4, r3
 8003ec8:	f000 f878 	bl	8003fbc <_sbrk_r>
 8003ecc:	4580      	cmp	r8, r0
 8003ece:	d13a      	bne.n	8003f46 <_malloc_r+0xd2>
 8003ed0:	6821      	ldr	r1, [r4, #0]
 8003ed2:	3503      	adds	r5, #3
 8003ed4:	1a6d      	subs	r5, r5, r1
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f7ff ffa5 	bl	8003e34 <sbrk_aligned>
 8003eea:	3001      	adds	r0, #1
 8003eec:	d02b      	beq.n	8003f46 <_malloc_r+0xd2>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	442b      	add	r3, r5
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e00e      	b.n	8003f14 <_malloc_r+0xa0>
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	d41e      	bmi.n	8003f3a <_malloc_r+0xc6>
 8003efc:	2a0b      	cmp	r2, #11
 8003efe:	d916      	bls.n	8003f2e <_malloc_r+0xba>
 8003f00:	1961      	adds	r1, r4, r5
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	6025      	str	r5, [r4, #0]
 8003f06:	bf18      	it	ne
 8003f08:	6059      	strne	r1, [r3, #4]
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	bf08      	it	eq
 8003f0e:	6031      	streq	r1, [r6, #0]
 8003f10:	5162      	str	r2, [r4, r5]
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	4638      	mov	r0, r7
 8003f16:	f104 060b 	add.w	r6, r4, #11
 8003f1a:	f000 f865 	bl	8003fe8 <__malloc_unlock>
 8003f1e:	f026 0607 	bic.w	r6, r6, #7
 8003f22:	1d23      	adds	r3, r4, #4
 8003f24:	1af2      	subs	r2, r6, r3
 8003f26:	d0b6      	beq.n	8003e96 <_malloc_r+0x22>
 8003f28:	1b9b      	subs	r3, r3, r6
 8003f2a:	50a3      	str	r3, [r4, r2]
 8003f2c:	e7b3      	b.n	8003e96 <_malloc_r+0x22>
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	bf0c      	ite	eq
 8003f34:	6032      	streq	r2, [r6, #0]
 8003f36:	605a      	strne	r2, [r3, #4]
 8003f38:	e7ec      	b.n	8003f14 <_malloc_r+0xa0>
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	6864      	ldr	r4, [r4, #4]
 8003f3e:	e7b2      	b.n	8003ea6 <_malloc_r+0x32>
 8003f40:	4634      	mov	r4, r6
 8003f42:	6876      	ldr	r6, [r6, #4]
 8003f44:	e7b9      	b.n	8003eba <_malloc_r+0x46>
 8003f46:	230c      	movs	r3, #12
 8003f48:	4638      	mov	r0, r7
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	f000 f84c 	bl	8003fe8 <__malloc_unlock>
 8003f50:	e7a1      	b.n	8003e96 <_malloc_r+0x22>
 8003f52:	6025      	str	r5, [r4, #0]
 8003f54:	e7de      	b.n	8003f14 <_malloc_r+0xa0>
 8003f56:	bf00      	nop
 8003f58:	200001a4 	.word	0x200001a4

08003f5c <_realloc_r>:
 8003f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f60:	4680      	mov	r8, r0
 8003f62:	4614      	mov	r4, r2
 8003f64:	460e      	mov	r6, r1
 8003f66:	b921      	cbnz	r1, 8003f72 <_realloc_r+0x16>
 8003f68:	4611      	mov	r1, r2
 8003f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6e:	f7ff bf81 	b.w	8003e74 <_malloc_r>
 8003f72:	b92a      	cbnz	r2, 8003f80 <_realloc_r+0x24>
 8003f74:	f7ff ff16 	bl	8003da4 <_free_r>
 8003f78:	4625      	mov	r5, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f80:	f000 f838 	bl	8003ff4 <_malloc_usable_size_r>
 8003f84:	4284      	cmp	r4, r0
 8003f86:	4607      	mov	r7, r0
 8003f88:	d802      	bhi.n	8003f90 <_realloc_r+0x34>
 8003f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f8e:	d812      	bhi.n	8003fb6 <_realloc_r+0x5a>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f7ff ff6e 	bl	8003e74 <_malloc_r>
 8003f98:	4605      	mov	r5, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d0ed      	beq.n	8003f7a <_realloc_r+0x1e>
 8003f9e:	42bc      	cmp	r4, r7
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	bf28      	it	cs
 8003fa6:	463a      	movcs	r2, r7
 8003fa8:	f7ff fed4 	bl	8003d54 <memcpy>
 8003fac:	4631      	mov	r1, r6
 8003fae:	4640      	mov	r0, r8
 8003fb0:	f7ff fef8 	bl	8003da4 <_free_r>
 8003fb4:	e7e1      	b.n	8003f7a <_realloc_r+0x1e>
 8003fb6:	4635      	mov	r5, r6
 8003fb8:	e7df      	b.n	8003f7a <_realloc_r+0x1e>
	...

08003fbc <_sbrk_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4d05      	ldr	r5, [pc, #20]	; (8003fd8 <_sbrk_r+0x1c>)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fbda 	bl	8000780 <_sbrk>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_sbrk_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_sbrk_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	200001ac 	.word	0x200001ac

08003fdc <__malloc_lock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__malloc_lock+0x8>)
 8003fde:	f000 b811 	b.w	8004004 <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	200001b0 	.word	0x200001b0

08003fe8 <__malloc_unlock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__malloc_unlock+0x8>)
 8003fea:	f000 b80c 	b.w	8004006 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200001b0 	.word	0x200001b0

08003ff4 <_malloc_usable_size_r>:
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f18      	subs	r0, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfbc      	itt	lt
 8003ffe:	580b      	ldrlt	r3, [r1, r0]
 8004000:	18c0      	addlt	r0, r0, r3
 8004002:	4770      	bx	lr

08004004 <__retarget_lock_acquire_recursive>:
 8004004:	4770      	bx	lr

08004006 <__retarget_lock_release_recursive>:
 8004006:	4770      	bx	lr

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
